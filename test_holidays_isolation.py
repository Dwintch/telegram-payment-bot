#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏ –º–æ–¥—É–ª—è holidays
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¢–û–õ–¨–ö–û –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ/—Ç–æ–ø–∏–∫–µ
"""

import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

class MockMessage:
    """–§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self, chat_id, thread_id, text, command=None):
        self.chat = MockChat(chat_id)
        self.message_thread_id = thread_id
        self.text = text
        self.from_user = MockUser(12345)
        self.message_id = 123
        # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        if command and text.startswith(f'/{command}'):
            pass  # –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤ —Ç–µ–∫—Å—Ç–µ

class MockChat:
    def __init__(self, chat_id):
        self.id = chat_id

class MockUser:
    def __init__(self, user_id):
        self.id = user_id
        self.username = "test_user"
        self.first_name = "Test"
        self.last_name = "User"

class MockBot:
    """–§–∏–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏"""
    def __init__(self):
        self.handlers = []
        self.sent_messages = []
        self.command_handlers = {}
        self.callback_handlers = []
        self.message_handlers = []

    def message_handler(self, commands=None, func=None):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        def decorator(handler_func):
            handler_info = {
                'func': handler_func,
                'commands': commands,
                'filter_func': func,
                'type': 'message'
            }
            self.handlers.append(handler_info)
            self.message_handlers.append(handler_info)
            if commands:
                for cmd in commands:
                    if cmd not in self.command_handlers:
                        self.command_handlers[cmd] = []
                    self.command_handlers[cmd].append(handler_info)
            return handler_func
        return decorator

    def callback_query_handler(self, func=None):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–ª–±—ç–∫–æ–≤"""
        def decorator(handler_func):
            handler_info = {
                'func': handler_func,
                'filter_func': func,
                'type': 'callback'
            }
            self.handlers.append(handler_info)
            self.callback_handlers.append(handler_info)
            return handler_func
        return decorator

    def send_message(self, chat_id, text, message_thread_id=None, reply_markup=None, parse_mode=None):
        """–≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_data = {
            'chat_id': chat_id,
            'text': text,
            'message_thread_id': message_thread_id,
            'reply_markup': reply_markup,
            'parse_mode': parse_mode
        }
        self.sent_messages.append(message_data)
        return MockMessage(chat_id, message_thread_id, text)

    def test_message(self, message):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        matched_handlers = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if message.text.startswith('/'):
            command = message.text.split()[0][1:]  # —É–±–∏—Ä–∞–µ–º '/'
            if command in self.command_handlers:
                for handler_info in self.command_handlers[command]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                    if handler_info['filter_func'] is None or handler_info['filter_func'](message):
                        matched_handlers.append(handler_info)
                        try:
                            handler_info['func'](message)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ message handlers
        for handler_info in self.message_handlers:
            if handler_info['commands'] is None:  # –Ω–µ –∫–æ–º–∞–Ω–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if handler_info['filter_func'] is None or handler_info['filter_func'](message):
                    matched_handlers.append(handler_info)
                    try:
                        handler_info['func'](message)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return matched_handlers

def test_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ holidays-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ó–û–õ–Ø–¶–ò–ò –º–æ–¥—É–ª—è holidays...\n")
    
    from holidays import register_holiday_handlers
    from holidays_config import HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID
    
    # –°–æ–∑–¥–∞–µ–º mock-–±–æ—Ç–∞
    mock_bot = MockBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å debug_mode=False (production)
    register_holiday_handlers(mock_bot, debug_mode=False)
    
    print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(mock_bot.handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ production mode")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "name": "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —á–∞—Ç –∏ —Ç–æ–ø–∏–∫ - –∫–æ–º–∞–Ω–¥–∞ /–≤—ã—Ö–æ–¥–Ω–æ–π",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "/–≤—ã—Ö–æ–¥–Ω–æ–π 2024-12-31 —Ç–µ—Å—Ç"),
            "should_be_processed": True
        },
        {
            "name": "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —á–∞—Ç –∏ —Ç–æ–ø–∏–∫ - –∫–æ–º–∞–Ω–¥–∞ /–≤—ã—Ö",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "/–≤—ã—Ö"),
            "should_be_processed": True
        },
        {
            "name": "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —á–∞—Ç –∏ —Ç–æ–ø–∏–∫ - –∫–æ–º–∞–Ω–¥–∞ /–≤—Å–µ–≤—ã—Ö",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "/–≤—Å–µ–≤—ã—Ö"),
            "should_be_processed": True
        },
        {
            "name": "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–æ–ø–∏–∫ - –∫–æ–º–∞–Ω–¥–∞ /–≤—ã—Ö–æ–¥–Ω–æ–π",
            "message": MockMessage(HOLIDAYS_CHAT_ID, 999, "/–≤—ã—Ö–æ–¥–Ω–æ–π 2024-12-31 —Ç–µ—Å—Ç"),
            "should_be_processed": False
        },
        {
            "name": "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —á–∞—Ç - –∫–æ–º–∞–Ω–¥–∞ /–≤—ã—Ö–æ–¥–Ω–æ–π",
            "message": MockMessage(-123456789, HOLIDAYS_THREAD_ID, "/–≤—ã—Ö–æ–¥–Ω–æ–π 2024-12-31 —Ç–µ—Å—Ç"),
            "should_be_processed": False
        },
        {
            "name": "‚ùå –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –∫–æ–º–∞–Ω–¥–∞ /–≤—ã—Ö–æ–¥–Ω–æ–π",
            "message": MockMessage(12345, None, "/–≤—ã—Ö–æ–¥–Ω–æ–π 2024-12-31 —Ç–µ—Å—Ç"),
            "should_be_processed": False
        },
        {
            "name": "‚ùå –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞ - –∫–æ–º–∞–Ω–¥–∞ /–≤—ã—Ö",
            "message": MockMessage(-987654321, 4, "/–≤—ã—Ö"),
            "should_be_processed": False
        },
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏:\n")
    
    all_passed = True
    for i, test_case in enumerate(test_cases, 1):
        print(f"{i}. {test_case['name']}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        initial_messages_count = len(mock_bot.sent_messages)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        matched_handlers = mock_bot.test_message(test_case['message'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        messages_sent = len(mock_bot.sent_messages) - initial_messages_count
        handlers_matched = len(matched_handlers)
        
        expected = test_case['should_be_processed']
        actual_processed = handlers_matched > 0
        
        if expected == actual_processed:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù"
        else:
            status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            all_passed = False
        
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {'–æ–±—Ä–∞–±–æ—Ç–∫–∞' if expected else '–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {handlers_matched} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, {messages_sent} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print(f"   –°—Ç–∞—Ç—É—Å: {status}\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º debug mode
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug mode...")
    mock_bot_debug = MockBot()
    register_holiday_handlers(mock_bot_debug, debug_mode=True)
    
    debug_handlers = len(mock_bot_debug.handlers)
    production_handlers = len(mock_bot.handlers)
    
    print(f"   Production mode: {production_handlers} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print(f"   Debug mode: {debug_handlers} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    if debug_handlers > production_handlers:
        print("   ‚úÖ Debug mode –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
    else:
        print("   ‚ùå Debug mode –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç production")
        all_passed = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(test_cases)}")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' if all_passed else '‚ùå –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'}")
    print(f"   ‚Ä¢ Production handlers: {production_handlers}")
    print(f"   ‚Ä¢ Debug handlers: {debug_handlers}")
    
    return all_passed

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑–æ–ª—è—Ü–∏–∏"""
    try:
        success = test_isolation()
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –ú–æ–¥—É–ª—å holidays —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ/—Ç–æ–ø–∏–∫–µ")
            print("‚úÖ –í –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã holidays –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
            return 0
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            print("‚ö†Ô∏è –ò–∑–æ–ª—è—Ü–∏—è –º–æ–¥—É–ª—è holidays —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return 1
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())