import os
import json
from collections import defaultdict, Counter

import telebot
from telebot import types
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN_2")
GROUP_CHAT_ID_ENV = os.getenv("CHAT_ID_FOR_REPORT")
THREAD_ID_ENV = os.getenv("THREAD_ID_FOR_REPORT2")  # –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

if BOT_TOKEN is None:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN_2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

if GROUP_CHAT_ID_ENV is None:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CHAT_ID_FOR_REPORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

if THREAD_ID_ENV is None:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è THREAD_ID_FOR_REPORT2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

GROUP_CHAT_ID = int(GROUP_CHAT_ID_ENV)
THREAD_ID = int(THREAD_ID_ENV)

bot = telebot.TeleBot(BOT_TOKEN)

SHOP_NAMES = ["—è–Ω—Ç–∞—Ä—å", "—Ö–∞–π–ø", "–ø–æ–ª–∫–∞"]
TOP_COUNTER_FILE = "top_counter.json"

orders = defaultdict(list)
position_counter = Counter()
user_states = {}  # user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(TOP_COUNTER_FILE):
    with open(TOP_COUNTER_FILE, "r", encoding="utf-8") as f:
        position_counter.update(json.load(f))


def save_counter():
    with open(TOP_COUNTER_FILE, "w", encoding="utf-8") as f:
        json.dump(position_counter, f, ensure_ascii=False)


def shop_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for shop in SHOP_NAMES:
        keyboard.add(types.InlineKeyboardButton(text=shop.capitalize(), callback_data=f"shop_{shop}"))
    return keyboard


@bot.message_handler(commands=["–∑–∞–∫–∞–∑"])
def start_order(message):
    user_states[message.from_user.id] = {"state": "choosing_shop"}
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=shop_keyboard())


@bot.callback_query_handler(func=lambda call: call.data.startswith("shop_"))
def shop_chosen(call):
    user_id = call.from_user.id
    shop = call.data.split("_")[1]
    user_states[user_id] = {"state": "writing_order", "shop": shop}

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: <b>{shop.capitalize()}</b>\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞:",
        parse_mode="HTML",
    )
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "writing_order")
def receive_order(message):
    user_id = message.from_user.id
    data = user_states.get(user_id)
    if not data:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–∫–∞–∑")
        return

    shop = data["shop"]
    text = message.text.replace(",", "\n")
    positions = [line.strip() for line in text.split("\n") if line.strip()]
    orders[shop].extend(positions)

    position_counter.update(positions)
    save_counter()

    formatted = "\n".join(f"‚ñ™Ô∏è {p}" for p in positions)
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥–ª—è <b>{shop.capitalize()}</b>:\n{formatted}", parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –≤ —Ç–µ–º—É —Å ID THREAD_ID
    bot.send_message(
        GROUP_CHAT_ID,
        f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è {shop.capitalize()}</b>:\n{formatted}",
        parse_mode="HTML",
        message_thread_id=THREAD_ID,
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states.pop(user_id, None)


@bot.message_handler(commands=["–≤—Å–µ_–∑–∞–∫–∞–∑—ã"])
def all_orders(message):
    if not orders:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    msg = ["üì¶ <b>–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:</b>"]
    for shop, items in orders.items():
        msg.append(f"\n<b>{shop.capitalize()}:</b>")
        for item in items:
            msg.append(f"‚ñ™Ô∏è {item}")
    bot.send_message(message.chat.id, "\n".join(msg), parse_mode="HTML")


@bot.message_handler(commands=["—Ç–æ–ø_–ø–æ–∑–∏—Ü–∏–∏"])
def top_positions(message):
    if not position_counter:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    top = position_counter.most_common(10)
    result = ["üìà <b>–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b>"]
    for i, (item, count) in enumerate(top, 1):
        result.append(f"{i}. {item} ‚Äî <b>{count}</b> —Ä–∞–∑(–∞)")
    bot.send_message(message.chat.id, "\n".join(result), parse_mode="HTML")


def run_bot2():
    print("‚úÖ –ë–æ—Ç 2 –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()


if __name__ == "__main__":
    run_bot2()
