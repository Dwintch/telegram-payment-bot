import telebot
from telebot import types
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = '8197209578:AAH4ypgRz9Butww_HxDTBeXJCgTzHQO1D_E'
GOOGLE_CREDENTIALS_FILE = 'credentials.json'
SPREADSHEET_NAME = '–û—Ç—á—ë—Ç—ã'

REPORT_CHAT_ID = -1002826712980
REPORT_THREAD_ID = 3

bot = telebot.TeleBot(TOKEN)
user_data = {}

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# === /start ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'shop': None, 'transactions': [], 'mode': 'add'}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–Ø–Ω—Ç–∞—Ä—å', '–•–∞–π–ø', '–ü–æ–ª–∫–∞')
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=markup)

# === –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ ===
@bot.message_handler(func=lambda m: m.text in ['–Ø–Ω—Ç–∞—Ä—å', '–•–∞–π–ø', '–ü–æ–ª–∫–∞'])
def choose_shop(message):
    chat_id = message.chat.id
    user_data[chat_id]['shop'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üí∞ –ü–µ—Ä–µ–≤–æ–¥', 'üîô –í–æ–∑–≤—Ä–∞—Ç')
    markup.add('üßæ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É')
    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# === –ü–µ—Ä–µ–≤–æ–¥ / –í–æ–∑–≤—Ä–∞—Ç ===
@bot.message_handler(func=lambda m: m.text in ['üí∞ –ü–µ—Ä–µ–≤–æ–¥', 'üîô –í–æ–∑–≤—Ä–∞—Ç'])
def action_handler(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return
    user_data[chat_id]['mode'] = 'subtract' if message.text == 'üîô –í–æ–∑–≤—Ä–∞—Ç' else 'add'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

# === –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ===
@bot.message_handler(func=lambda m: m.text.isdigit())
def handle_amount(message):
    chat_id = message.chat.id
    amount = int(message.text)
    mode = user_data[chat_id].get('mode', 'add')

    if mode == 'subtract':
        amount = -amount
        user_data[chat_id]['mode'] = 'add'  # –°–±—Ä–æ—Å –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º

    user_data[chat_id]['transactions'].append(amount)
    total = sum(user_data[chat_id]['transactions'])
    bot.send_message(chat_id, f"–°—É–º–º–∞ {'–≤—ã—á—Ç–µ–Ω–∞' if amount < 0 else '–¥–æ–±–∞–≤–ª–µ–Ω–∞'}: {abs(amount)}‚ÇΩ\nüí≥ –í—Å–µ–≥–æ: {total}‚ÇΩ")

# === –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É ===
@bot.message_handler(func=lambda m: m.text == 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É')
def view_sum(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return
    transactions = user_data[chat_id].get('transactions', [])
    total = sum(transactions)
    bot.send_message(chat_id, f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {user_data[chat_id]['shop']}\nüí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {total}‚ÇΩ\nüßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")

# === –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç ===
@bot.message_handler(func=lambda m: m.text == 'üßæ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç')
def compose_report(message):
    chat_id = message.chat.id
    transactions = user_data[chat_id].get('transactions', [])
    if not transactions:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return
    total = sum(transactions)
    user_data[chat_id]['total'] = total
    bot.send_message(chat_id, f"üìã –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: {total}‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
    bot.register_next_step_handler(message, get_cash)

def get_cash(message):
    chat_id = message.chat.id
    try:
        cash = int(message.text)
        user_data[chat_id]['cash'] = cash
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
        bot.register_next_step_handler(message, get_terminal)
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
        bot.register_next_step_handler(message, get_cash)

def get_terminal(message):
    chat_id = message.chat.id
    try:
        terminal = int(message.text)
        user_data[chat_id]['terminal'] = terminal

        shop = user_data[chat_id]['shop']
        total = user_data[chat_id]['total']
        cash = user_data[chat_id]['cash']
        terminal = user_data[chat_id]['terminal']
        now = datetime.now().strftime("%d.%m.%Y %H:%M")

        report = (
            f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
            f"üìÖ –î–∞—Ç–∞: {now}\n"
            f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {total}‚ÇΩ\n"
            f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
            f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ"
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '‚ùå –û—Ç–º–µ–Ω–∞')

        user_data[chat_id]['report_text'] = report
        bot.send_message(chat_id, report + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=markup)

    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
        bot.register_next_step_handler(message, get_terminal)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ===
@bot.message_handler(func=lambda m: m.text in ['‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '‚ùå –û—Ç–º–µ–Ω–∞'])
def handle_report_choice(message):
    chat_id = message.chat.id

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        user_data[chat_id].pop('cash', None)
        user_data[chat_id].pop('terminal', None)
        user_data[chat_id].pop('total', None)
        user_data[chat_id].pop('report_text', None)
        bot.send_message(chat_id, "‚ùå –û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üí∞ –ü–µ—Ä–µ–≤–æ–¥', 'üîô –í–æ–∑–≤—Ä–∞—Ç')
        markup.add('üßæ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É')
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    shop = user_data[chat_id]['shop']
    total = user_data[chat_id]['total']
    cash = user_data[chat_id]['cash']
    terminal = user_data[chat_id]['terminal']
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    sheet.append_row([now, shop, total, cash, terminal])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –≤ —Ç–µ–º—É
    report_text = user_data[chat_id]['report_text']
    bot.send_message(REPORT_CHAT_ID, report_text, message_thread_id=REPORT_THREAD_ID)

    # –û—á–∏—Å—Ç–∫–∞
    user_data[chat_id]['transactions'] = []
    for key in ['cash', 'terminal', 'total', 'report_text']:
        user_data[chat_id].pop(key, None)

    bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.")

# === –ó–∞–ø—É—Å–∫ ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()

