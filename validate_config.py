#!/usr/bin/env python3
"""
Configuration validation script for thread ID handling

This script checks that all thread ID constants are properly configured
and provides a summary of the current setup.
"""

import os
import sys

def check_config():
    """Check configuration and provide setup summary"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò THREAD ID")
    print("=" * 50)
    
    # Check if files exist
    files_to_check = [
        'bot.py',
        'holidays.py', 
        'holidays_config.py',
        'THREAD_IMPLEMENTATION_SUMMARY.md'
    ]
    
    missing_files = []
    for file in files_to_check:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("\nüìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø THREAD ID:")
    print("-" * 30)
    
    # Try to extract thread ID constants
    try:
        # Read bot.py to get constants
        with open('bot.py', 'r', encoding='utf-8') as f:
            bot_content = f.read()
            
        # Extract thread constants
        thread_constants = {}
        for line in bot_content.split('\n'):
            if 'THREAD_ID_FOR_ORDER =' in line:
                thread_constants['ORDERS'] = line.split('=')[1].strip()
            elif 'THREAD_ID_FOR_REPORT =' in line:
                thread_constants['REPORTS'] = line.split('=')[1].strip()
            elif 'CHAT_ID_FOR_REPORT =' in line:
                thread_constants['CHAT'] = line.split('=')[1].strip()
        
        print(f"üõí –ó–∞–∫–∞–∑—ã (ORDERS): thread {thread_constants.get('ORDERS', '–ù–ï –ù–ê–ô–î–ï–ù–û')}")
        print(f"üìä –û—Ç—á—ë—Ç—ã (REPORTS): thread {thread_constants.get('REPORTS', '–ù–ï –ù–ê–ô–î–ï–ù–û')}")
        print(f"üí¨ –ß–∞—Ç –≥—Ä—É–ø–ø—ã: {thread_constants.get('CHAT', '–ù–ï –ù–ê–ô–î–ï–ù–û')}")
        
        # Check holidays config
        with open('holidays_config.py', 'r', encoding='utf-8') as f:
            holidays_content = f.read()
            
        holidays_constants = {}
        for line in holidays_content.split('\n'):
            if 'HOLIDAYS_THREAD_ID =' in line:
                holidays_constants['THREAD'] = line.split('=')[1].strip()
            elif 'HOLIDAYS_CHAT_ID =' in line:
                holidays_constants['CHAT'] = line.split('=')[1].strip()
                
        print(f"üèñÔ∏è –í—ã—Ö–æ–¥–Ω—ã–µ: thread {holidays_constants.get('THREAD', '–ù–ï –ù–ê–ô–î–ï–ù–û')} –≤ —á–∞—Ç–µ {holidays_constants.get('CHAT', '–ù–ï –ù–ê–ô–î–ï–ù–û')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    print("\nüß™ –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô:")
    print("-" * 25)
    
    # Check if thread functions exist in files
    with open('bot.py', 'r', encoding='utf-8') as f:
        bot_content = f.read()
        
    functions_to_check = [
        'get_thread_id_from_message',
        'send_message_with_thread_logging',
        'send_photo_with_thread_logging',
        'send_video_with_thread_logging',
        'send_media_group_with_thread_logging'
    ]
    
    for func in functions_to_check:
        if f"def {func}" in bot_content:
            print(f"‚úÖ {func}")
        else:
            print(f"‚ùå {func} - –ù–ï –ù–ê–ô–î–ï–ù–ê")
    
    # Check holidays functions
    with open('holidays.py', 'r', encoding='utf-8') as f:
        holidays_content = f.read()
        
    holidays_functions = [
        'get_thread_id_from_message',
        'send_message_with_thread_logging',
        'reply_to_with_thread_logging'
    ]
    
    print("\nüèñÔ∏è –§–£–ù–ö–¶–ò–ò HOLIDAYS:")
    for func in holidays_functions:
        if f"def {func}" in holidays_content:
            print(f"‚úÖ {func}")
        else:
            print(f"‚ùå {func} - –ù–ï –ù–ê–ô–î–ï–ù–ê")
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    print("-" * 30)
    
    # Count thread-aware vs regular calls
    import re
    
    bot_thread_aware = len(re.findall(r'send_.*_with_thread_logging', bot_content))
    bot_regular = len(re.findall(r'bot\.send_message\(', bot_content))
    
    holidays_thread_aware = len(re.findall(r'send_.*_with_thread_logging|reply_to_with_thread_logging', holidays_content))
    holidays_regular = len(re.findall(r'bot\.send_message\(|bot\.reply_to\(', holidays_content))
    
    print(f"ü§ñ Bot: {bot_thread_aware} thread-aware, {bot_regular} –æ–±—ã—á–Ω—ã—Ö")
    print(f"üèñÔ∏è Holidays: {holidays_thread_aware} thread-aware, {holidays_regular} –æ–±—ã—á–Ω—ã—Ö")
    
    # Calculate coverage
    bot_total = bot_thread_aware + bot_regular
    holidays_total = holidays_thread_aware + holidays_regular
    
    bot_coverage = (bot_thread_aware / bot_total * 100) if bot_total > 0 else 0
    holidays_coverage = (holidays_thread_aware / holidays_total * 100) if holidays_total > 0 else 0
    
    print(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ bot.py: {bot_coverage:.1f}%")
    print(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ holidays.py: {holidays_coverage:.1f}%")
    
    print("\n‚úÖ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("=" * 20)
    
    if bot_thread_aware >= 50 and holidays_thread_aware >= 3:
        print("üéâ –û–¢–õ–ò–ß–ù–û! Thread ID handling —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ production")
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        print("‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        return False

if __name__ == '__main__':
    success = check_config()
    
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        sys.exit(0)
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        sys.exit(1)