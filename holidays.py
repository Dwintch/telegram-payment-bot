#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è Telegram –±–æ—Ç–∞
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞—è–≤–æ–∫, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
"""

import json
import os
import logging
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional
from telebot import types

from holidays_config import (
    HOLIDAYS_CHAT_ID,
    HOLIDAYS_THREAD_ID, 
    HOLIDAYS_ADMIN_IDS,
    HOLIDAYS_DB_PATH
)

# === THREAD ID UTILITY FUNCTIONS FOR HOLIDAYS ===
def get_thread_id_from_message(message):
    """–ò–∑–≤–ª–µ—á—å thread_id –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    if hasattr(message, 'message_thread_id') and message.message_thread_id:
        return message.message_thread_id
    return None

def send_message_with_thread_logging(bot, chat_id, text, thread_id=None, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞ (holidays module)"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        thread_info = f"thread {thread_id}" if thread_id else "–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        logging.info(f"üì§ [HOLIDAYS] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}, {thread_info}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if thread_id:
            kwargs['message_thread_id'] = thread_id
        result = bot.send_message(chat_id, text, **kwargs)
        
        logging.info(f"‚úÖ [HOLIDAYS] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}, {thread_info}")
        return result
    except Exception as e:
        thread_info = f"thread {thread_id}" if thread_id else "–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        logging.error(f"‚ùå [HOLIDAYS] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}, {thread_info}: {e}")
        raise

def reply_to_with_thread_logging(bot, message, text, **kwargs):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (holidays module)"""
    try:
        thread_id = get_thread_id_from_message(message)
        thread_info = f"thread {thread_id}" if thread_id else "–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        logging.info(f"üì§ [HOLIDAYS] –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {message.chat.id}, {thread_info}")
        
        result = bot.reply_to(message, text, **kwargs)
        
        logging.info(f"‚úÖ [HOLIDAYS] –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {message.chat.id}, {thread_info}")
        return result
    except Exception as e:
        thread_id = get_thread_id_from_message(message)
        thread_info = f"thread {thread_id}" if thread_id else "–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        logging.error(f"‚ùå [HOLIDAYS] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç {message.chat.id}, {thread_info}: {e}")
        raise

# –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
STATUS_PENDING = "pending"
STATUS_APPROVED = "approved"
STATUS_REJECTED = "rejected"

class HolidayDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._data = self._load_data()
    
    def _load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.db_path):
            try:
                with open(self.db_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        return {
            "requests": {},  # {request_id: {user_id, date, reason, status, created_at, processed_by, processed_at}}
            "users": {},     # {user_id: {name, username, first_name, last_name}}
            "next_id": 1
        }
    
    def _save_data(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.db_path, 'w', encoding='utf-8') as f:
                json.dump(self._data, f, ensure_ascii=False, indent=2)
            return True
        except IOError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö: {e}")
            return False
    
    def add_user(self, user_id: int, user_data: Dict) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self._data["users"][str(user_id)] = {
            "username": user_data.get("username", ""),
            "first_name": user_data.get("first_name", ""),
            "last_name": user_data.get("last_name", ""),
            "last_update": datetime.now().isoformat()
        }
        self._save_data()
    
    def create_request(self, user_id: int, holiday_date: str, reason: str) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π"""
        request_id = self._data["next_id"]
        self._data["next_id"] += 1
        
        self._data["requests"][str(request_id)] = {
            "user_id": user_id,
            "date": holiday_date,
            "reason": reason,
            "status": STATUS_PENDING,
            "created_at": datetime.now().isoformat(),
            "processed_by": None,
            "processed_at": None
        }
        
        self._save_data()
        return request_id
    
    def update_request_status(self, request_id: int, status: str, admin_id: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        req_id_str = str(request_id)
        if req_id_str not in self._data["requests"]:
            return False
        
        self._data["requests"][req_id_str]["status"] = status
        self._data["requests"][req_id_str]["processed_by"] = admin_id
        self._data["requests"][req_id_str]["processed_at"] = datetime.now().isoformat()
        
        return self._save_data()
    
    def get_request(self, request_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID"""
        return self._data["requests"].get(str(request_id))
    
    def get_user_requests(self, user_id: int, status: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        requests = []
        for req_id, req_data in self._data["requests"].items():
            if req_data["user_id"] == user_id:
                if status is None or req_data["status"] == status:
                    req_data["id"] = int(req_id)
                    requests.append(req_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        requests.sort(key=lambda x: x["created_at"], reverse=True)
        return requests
    
    def get_future_approved_requests(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –±—É–¥—É—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = date.today().isoformat()
        requests = []
        
        for req_id, req_data in self._data["requests"].items():
            if (req_data["user_id"] == user_id and 
                req_data["status"] == STATUS_APPROVED and 
                req_data["date"] >= today):
                req_data["id"] = int(req_id)
                requests.append(req_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ
        requests.sort(key=lambda x: x["date"])
        return requests
    
    def get_all_approved_requests(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        requests = []
        
        for req_id, req_data in self._data["requests"].items():
            if (req_data["user_id"] == user_id and 
                req_data["status"] == STATUS_APPROVED):
                req_data["id"] = int(req_id)
                requests.append(req_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        requests.sort(key=lambda x: x["date"], reverse=True)
        return requests
    
    def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return self._data["users"].get(str(user_id))
    
    def is_date_available(self, holiday_date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–∞—Ç–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (–Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É)"""
        for req_data in self._data["requests"].values():
            if (req_data["date"] == holiday_date and 
                req_data["status"] == STATUS_APPROVED):
                return False
        return True
    
    def get_free_dates(self, days_count: int = 7) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö"""
        free_dates = []
        current_date = date.today()
        days_checked = 0
        max_days_to_check = days_count * 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–µ –¥–Ω–µ–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
        
        while len(free_dates) < days_count and days_checked < max_days_to_check:
            days_checked += 1
            check_date = current_date + timedelta(days=days_checked)
            date_str = check_date.isoformat()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥–Ω–∏–µ –¥–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞, weekday 0-4)
            if check_date.weekday() < 5 and self.is_date_available(date_str):
                free_dates.append(date_str)
        
        return free_dates

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db = HolidayDatabase(HOLIDAYS_DB_PATH)

def is_holidays_chat_and_thread(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞"""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    chat_id = message.chat.id
    thread_id = getattr(message, 'message_thread_id', None)
    text = getattr(message, 'text', 'N/A')
    user_id = message.from_user.id if message.from_user else 'Unknown'
    
    logging.info(f"üîç DEBUG: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - Chat ID: {chat_id}, Thread ID: {thread_id}, User ID: {user_id}, Text: '{text[:50]}{'...' if len(text) > 50 else ''}'")
    
    result = (chat_id == HOLIDAYS_CHAT_ID and thread_id == HOLIDAYS_THREAD_ID)
    
    if not result:
        logging.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –æ–∂–∏–¥–∞–µ—Ç—Å—è Chat ID: {HOLIDAYS_CHAT_ID}, Thread ID: {HOLIDAYS_THREAD_ID}")
    else:
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É holidays")
    
    return result

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in HOLIDAYS_ADMIN_IDS

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        date_obj = datetime.fromisoformat(date_str).date()
        return date_obj.strftime("%d.%m.%Y")
    except:
        return date_str

def format_datetime(datetime_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt_obj = datetime.fromisoformat(datetime_str)
        return dt_obj.strftime("%d.%m.%Y %H:%M")
    except:
        return datetime_str

def get_user_display_name(user_data: Dict) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_data.get("first_name") and user_data.get("last_name"):
        return f"{user_data['first_name']} {user_data['last_name']}"
    elif user_data.get("first_name"):
        return user_data["first_name"]
    elif user_data.get("username"):
        return f"@{user_data['username']}"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

def create_approval_keyboard(request_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"holiday_approve_{request_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"holiday_reject_{request_id}")
    )
    return keyboard

def parse_flexible_date(date_input: str) -> Optional[date]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≥–∏–±–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–≤
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - /–≤ 24 -> –µ—Å–ª–∏ –¥–æ 24 —á–∏—Å–ª–∞ - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ >= 24 - —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    - /–≤ 24.08 –∏–ª–∏ /–≤ 24 08 -> 24-–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ (—ç—Ç–æ—Ç –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)
    - /–≤ 24.08.2025 –∏–ª–∏ /–≤ 24 08 2025 -> —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞
    
    Returns:
        date –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ —Ç–æ—á–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = date_input.strip().replace(' ', '.')
        
        # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        parts = []
        for part in normalized.split('.'):
            if part.isdigit():
                parts.append(str(int(part)))  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
            else:
                parts.append(part)
        
        today = date.today()
        current_year = today.year
        current_month = today.month
        current_day = today.day
        
        if len(parts) == 1:
            # –§–æ—Ä–º–∞—Ç: /–≤ 24
            day = int(parts[0])
            if not (1 <= day <= 31):
                return None
                
            # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
            if current_day < day:
                # –î–æ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ - –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                target_month = current_month
                target_year = current_year
            else:
                # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ - –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                if current_month == 12:
                    target_month = 1
                    target_year = current_year + 1
                else:
                    target_month = current_month + 1
                    target_year = current_year
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            try:
                return date(target_year, target_month, day)
            except ValueError:
                return None
            
        elif len(parts) == 2:
            # –§–æ—Ä–º–∞—Ç: /–≤ 24.08 –∏–ª–∏ /–≤ 24 08
            day = int(parts[0])
            month = int(parts[1])
            
            if not (1 <= day <= 31) or not (1 <= month <= 12):
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–¥ - —ç—Ç–æ—Ç –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π
            target_date_this_year = None
            try:
                target_date_this_year = date(current_year, month, day)
            except ValueError:
                # Invalid date (like Feb 31) - try next year
                try:
                    return date(current_year + 1, month, day)
                except ValueError:
                    return None
            
            if target_date_this_year and target_date_this_year > today:
                return target_date_this_year
            else:
                try:
                    return date(current_year + 1, month, day)
                except ValueError:
                    return None
            
        elif len(parts) == 3:
            # –§–æ—Ä–º–∞—Ç: /–≤ 24.08.2025 –∏–ª–∏ /–≤ 24 08 2025
            day = int(parts[0])
            month = int(parts[1])
            year = int(parts[2])
            
            if not (1 <= day <= 31) or not (1 <= month <= 12) or year < 2020:
                return None
            
            try:
                return date(year, month, day)
            except ValueError:
                return None
        
        else:
            return None
            
    except (ValueError, IndexError):
        return None

def handle_holiday_request(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π"""
    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user_data = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        db.add_user(message.from_user.id, user_data)
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text.strip()
        parts = text.split(None, 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º 3 —á–∞—Å—Ç–∏
        
        if len(parts) < 3:
            error_msg = (
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–≤—ã—Ö–æ–¥–Ω–æ–π –ì–ì–ì–ì-–ú–ú-–î–î –ø—Ä–∏—á–∏–Ω–∞\n"
                "–ü—Ä–∏–º–µ—Ä: /–≤—ã—Ö–æ–¥–Ω–æ–π 2024-12-31 —Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞"
            )
            bot.reply_to(message, error_msg)
            logging.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        command, date_str, reason = parts
        logging.info(f"üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏: –¥–∞—Ç–∞={date_str}, –ø—Ä–∏—á–∏–Ω–∞={reason[:30]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            holiday_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            error_msg = (
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î\n"
                "–ü—Ä–∏–º–µ—Ä: 2024-12-31"
            )
            bot.reply_to(message, error_msg)
            logging.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{date_str}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if holiday_date <= date.today():
            bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
            logging.info(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É {date_str} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ (–Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫)
        if not db.is_date_available(date_str):
            bot.reply_to(message, f"‚ùå –î–∞—Ç–∞ {format_date(date_str)} —É–∂–µ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            logging.info(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–Ω—è—Ç—É—é –¥–∞—Ç—É {date_str} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        request_id = db.create_request(message.from_user.id, date_str, reason)
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_name = get_user_display_name(user_data)
        confirmation_msg = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ–¥–∞–Ω–∞!\n\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(date_str)}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{request_id}\n\n"
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        reply_to_with_thread_logging(bot, message, confirmation_msg)
        logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_text = (
            f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
            f"üë§ –û—Ç: {user_name} (ID: {message.from_user.id})\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(date_str)}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"üïê –ü–æ–¥–∞–Ω–∞: {format_datetime(datetime.now().isoformat())}"
        )
        
        try:
            send_message_with_thread_logging(
                bot,
                HOLIDAYS_CHAT_ID,
                admin_text,
                thread_id=HOLIDAYS_THREAD_ID,
                reply_markup=create_approval_keyboard(request_id)
            )
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_flexible_holiday_request(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–≤ —Å –≥–∏–±–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã"""
    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏–±–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user_data = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        db.add_user(message.from_user.id, user_data)
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text.strip()
        parts = text.split(None, 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º 3 —á–∞—Å—Ç–∏
        
        if len(parts) < 3:
            error_msg = (
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–≤ –¥–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω–∞\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /–≤ 24 —Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞\n"
                "‚Ä¢ /–≤ 24.08 –æ—Ç–ø—É—Å–∫\n" 
                "‚Ä¢ /–≤ 24 08 –±–æ–ª–µ–∑–Ω—å\n"
                "‚Ä¢ /–≤ 24.08.2025 —Å–≤–∞–¥—å–±–∞\n"
                "‚Ä¢ /–≤ 24 08 2025 –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"
            )
            bot.reply_to(message, error_msg)
            logging.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        command, date_input, reason = parts
        logging.info(f"üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –≥–∏–±–∫–æ–π –∑–∞—è–≤–∫–∏: –¥–∞—Ç–∞_–≤–≤–æ–¥={date_input}, –ø—Ä–∏—á–∏–Ω–∞={reason[:30]}...")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        holiday_date = parse_flexible_date(date_input)
        if not holiday_date:
            error_msg = (
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ /–≤ 24 (–¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ/—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞)\n"
                "‚Ä¢ /–≤ 24.08 –∏–ª–∏ /–≤ 24 08 (–¥–µ–Ω—å –∏ –º–µ—Å—è—Ü)\n"
                "‚Ä¢ /–≤ 24.08.2025 –∏–ª–∏ /–≤ 24 08 2025 (–ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞)"
            )
            bot.reply_to(message, error_msg)
            logging.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{date_input}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        date_str = holiday_date.isoformat()
        logging.info(f"üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {date_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if holiday_date <= date.today():
            bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
            logging.info(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É {date_str} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ (–Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫)
        if not db.is_date_available(date_str):
            bot.reply_to(message, f"‚ùå –î–∞—Ç–∞ {format_date(date_str)} —É–∂–µ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            logging.info(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–Ω—è—Ç—É—é –¥–∞—Ç—É {date_str} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        request_id = db.create_request(message.from_user.id, date_str, reason)
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_name = get_user_display_name(user_data)
        confirmation_msg = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ–¥–∞–Ω–∞!\n\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(date_str)}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{request_id}\n\n"
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        reply_to_with_thread_logging(bot, message, confirmation_msg)
        logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_text = (
            f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
            f"üë§ –û—Ç: {user_name} (ID: {message.from_user.id})\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(date_str)}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"üïê –ü–æ–¥–∞–Ω–∞: {format_datetime(datetime.now().isoformat())}"
        )
        
        try:
            send_message_with_thread_logging(
                bot,
                HOLIDAYS_CHAT_ID,
                admin_text,
                thread_id=HOLIDAYS_THREAD_ID,
                reply_markup=create_approval_keyboard(request_id)
            )
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∏–±–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_free_dates_command(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /—Å–¥, /–¥–∞—Ç—ã - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã"""
    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user_data = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        db.add_user(message.from_user.id, user_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
        free_dates = db.get_free_dates(7)
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(free_dates)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç")
        
        if not free_dates:
            bot.reply_to(message, "üòî –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö:\n\n"
        for i, date_str in enumerate(free_dates, 1):
            text += f"{i}. {format_date(date_str)}\n"
        
        text += f"\nüí° –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–≤"
        
        reply_to_with_thread_logging(bot, message, text)
        logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

def handle_future_holidays_command(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–≤—ã—Ö - –ø–æ–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ"""
    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–≤—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user_data = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        db.add_user(message.from_user.id, user_data)
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–≤—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        requests = db.get_future_approved_requests(message.from_user.id)
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(requests)} –±—É–¥—É—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        if not requests:
            bot.reply_to(message, "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = "üìÖ –í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ:\n\n"
        for req in requests:
            text += f"üìÖ {format_date(req['date'])}\n"
            text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {req['reason']}\n"
            text += f"üÜî –ó–∞—è–≤–∫–∞: #{req['id']}\n\n"
        
        bot.reply_to(message, text)
        logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

def handle_all_holidays_command(bot, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–≤—Å–µ–≤—ã—Ö - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ"""
    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–≤—Å–µ–≤—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user_data = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        db.add_user(message.from_user.id, user_data)
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–≤—Å–µ–≤—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        requests = db.get_all_approved_requests(message.from_user.id)
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(requests)} –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        if not requests:
            bot.reply_to(message, "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = "üìÖ –í—Å–µ –≤–∞—à–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ:\n\n"
        for req in requests:
            status_icon = "üîÆ" if req['date'] >= date.today().isoformat() else "üìã"
            text += f"{status_icon} {format_date(req['date'])}\n"
            text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {req['reason']}\n"
            text += f"üÜî –ó–∞—è–≤–∫–∞: #{req['id']}\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 4000:
            text = text[:3950] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
            logging.info(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        bot.reply_to(message, text)
        logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

def handle_approval_callback(bot, call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"""
    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {call.from_user.id}: {call.data}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á–∞—Ç—É —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        logging.warning(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        return
    
    try:
        callback_data = call.data
        if callback_data.startswith("holiday_approve_"):
            request_id = int(callback_data.replace("holiday_approve_", ""))
            status = STATUS_APPROVED
            status_text = "‚úÖ –û–î–û–ë–†–ï–ù–ê"
            action_text = "–æ–¥–æ–±—Ä–µ–Ω–∞"
        elif callback_data.startswith("holiday_reject_"):
            request_id = int(callback_data.replace("holiday_reject_", ""))
            status = STATUS_REJECTED
            status_text = "‚ùå –û–¢–ö–õ–û–ù–ï–ù–ê"
            action_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        else:
            logging.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data}")
            return
        
        logging.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {action_text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.get_request(request_id)
        if not request:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            logging.error(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if request["status"] != STATUS_PENDING:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
            logging.info(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {request['status']})")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if not db.update_request_status(request_id, status, call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏!")
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id}")
            return
        
        logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {call.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø–æ–¥–∞–≤—à–µ–º –∑–∞—è–≤–∫—É
        user_info = db.get_user_info(request["user_id"])
        user_name = get_user_display_name(user_info) if user_info else f"ID: {request['user_id']}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_text = (
            f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π {status_text}\n\n"
            f"üë§ –û—Ç: {user_name} (ID: {request['user_id']})\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(request['date'])}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {request['reason']}\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"üïê –ü–æ–¥–∞–Ω–∞: {format_datetime(request['created_at'])}\n"
            f"üëÆ {action_text}: {get_user_display_name({'first_name': call.from_user.first_name, 'last_name': call.from_user.last_name})}\n"
            f"üïê {format_datetime(datetime.now().isoformat())}"
        )
        
        bot.edit_message_text(
            updated_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        notification_text = (
            f"üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π {status_text.lower()}\n\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(request['date'])}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {request['reason']}\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{request_id}"
        )
        
        try:
            bot.send_message(request["user_id"], notification_text)
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['user_id']} –æ –∑–∞—è–≤–∫–µ #{request_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['user_id']}: {e}")
        
        bot.answer_callback_query(call.id, f"‚úÖ –ó–∞—è–≤–∫–∞ {action_text}!")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–±—ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {call.from_user.id}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

def register_holiday_handlers(bot, debug_mode=True):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        debug_mode: –ï—Å–ª–∏ True, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω)
    """
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) - –¢–û–õ–¨–ö–û –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
    @bot.message_handler(commands=['–≤—ã—Ö–æ–¥–Ω–æ–π'], func=lambda message: is_holidays_chat_and_thread(message))
    def holiday_request_handler(message):
        handle_holiday_request(bot, message)
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π (–Ω–æ–≤—ã–π –≥–∏–±–∫–∏–π —Ñ–æ—Ä–º–∞—Ç) - –¢–û–õ–¨–ö–û –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
    @bot.message_handler(commands=['–≤'], func=lambda message: is_holidays_chat_and_thread(message))
    def flexible_holiday_request_handler(message):
        handle_flexible_holiday_request(bot, message)
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—É–¥—É—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö - –¢–û–õ–¨–ö–û –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
    @bot.message_handler(commands=['–≤—ã—Ö'], func=lambda message: is_holidays_chat_and_thread(message))
    def future_holidays_handler(message):
        handle_future_holidays_command(bot, message)
    
    # –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏ —Å–∏–Ω–æ–Ω–∏–º—ã) - –¢–û–õ–¨–ö–û –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
    @bot.message_handler(commands=['–≤—Å–µ–≤—ã—Ö', '–≤—Å', '—Å–ø–∏—Å–æ–∫'], func=lambda message: is_holidays_chat_and_thread(message))
    def all_holidays_handler(message):
        handle_all_holidays_command(bot, message)
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç - –¢–û–õ–¨–ö–û –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
    @bot.message_handler(commands=['—Å–¥', '–¥–∞—Ç—ã'], func=lambda message: is_holidays_chat_and_thread(message))
    def free_dates_handler(message):
        handle_free_dates_command(bot, message)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è - –¢–û–õ–¨–ö–û –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
    @bot.callback_query_handler(func=lambda call: call.message.chat.id == HOLIDAYS_CHAT_ID and call.data.startswith(('holiday_approve_', 'holiday_reject_')))
    def approval_callback_handler(call):
        handle_approval_callback(bot, call)
    
    # –í–†–ï–ú–ï–ù–ù–´–ô DEBUG-–û–ë–†–ê–ë–û–¢–ß–ò–ö (–æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º debug_mode=False)
    if debug_mode:
        @bot.message_handler(func=lambda message: message.chat.id == HOLIDAYS_CHAT_ID)
        def debug_message_handler(message):
            """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ"""
            try:
                chat_id = message.chat.id
                thread_id = getattr(message, 'message_thread_id', None)
                text = getattr(message, 'text', 'N/A')
                user_id = message.from_user.id if message.from_user else 'Unknown'
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∑–∞–¥–∞—á–µ)
                logging.info(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - Chat ID: {chat_id}, Thread ID: {thread_id}, User ID: {user_id}, Text: '{text[:50]}{'...' if len(text) > 50 else ''}'")
                
                # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞
                if is_holidays_chat_and_thread(message):
                    debug_response = (
                        f"üîß DEBUG: –Ø –≤–∏–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {chat_id}, "
                        f"—Ç–æ–ø–∏–∫–∞ {thread_id}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n"
                        f"–¢–µ–∫—Å—Ç: '{text[:100]}{'...' if len(text) > 100 else ''}'\n\n"
                        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è:\n"
                        f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π Chat ID: {HOLIDAYS_CHAT_ID}\n"
                        f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π Thread ID: {HOLIDAYS_THREAD_ID}\n"
                        f"‚Ä¢ –°–æ–≤–ø–∞–¥–∞–µ—Ç —á–∞—Ç: {'‚úÖ' if chat_id == HOLIDAYS_CHAT_ID else '‚ùå'}\n"
                        f"‚Ä¢ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ø–∏–∫: {'‚úÖ' if thread_id == HOLIDAYS_THREAD_ID else '‚ùå'}"
                    )
                    
                    logging.info(f"üîß DEBUG Handler: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {chat_id}, —Ç–æ–ø–∏–∫ {thread_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫, –≥–¥–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    send_message_with_thread_logging(
                        bot,
                        chat_id=chat_id,
                        text=debug_response,
                        thread_id=thread_id
                    )
                else:
                    logging.info(f"üîß DEBUG Handler: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–ø–∏–∫–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º")
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        
        logging.info(f"üîß DEBUG: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç–∞ {HOLIDAYS_CHAT_ID}")
    
    logging.info("‚úÖ –ú–æ–¥—É–ª—å —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")