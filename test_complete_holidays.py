#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—è holidays –≤ debug –∏ production —Ä–µ–∂–∏–º–∞—Ö
"""

import sys
import logging
from datetime import datetime, date, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

class MockMessage:
    """–§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self, chat_id, thread_id=None, text="test", user_id=12345, username="test_user", first_name="Test", last_name="User"):
        self.chat = MockChat(chat_id)
        self.message_thread_id = thread_id
        self.text = text
        self.from_user = MockUser(user_id, username, first_name, last_name)

class MockChat:
    def __init__(self, chat_id):
        self.id = chat_id

class MockUser:
    def __init__(self, user_id, username="test_user", first_name="Test", last_name="User"):
        self.id = user_id
        self.username = username
        self.first_name = first_name
        self.last_name = last_name

class MockBot:
    """–§–∏–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.sent_messages = []
        self.handlers = []
        self.current_message_id = 1000
    
    def send_message(self, chat_id, text, message_thread_id=None, reply_markup=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_id = self.current_message_id
        self.current_message_id += 1
        
        self.sent_messages.append({
            'message_id': message_id,
            'chat_id': chat_id,
            'text': text,
            'thread_id': message_thread_id,
            'reply_markup': reply_markup,
            'timestamp': datetime.now()
        })
        return message_id
    
    def reply_to(self, message, text, reply_markup=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.send_message(message.chat.id, text, message.message_thread_id, reply_markup)
    
    def edit_message_text(self, text, chat_id, message_id):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        pass
    
    def message_handler(self, **kwargs):
        def decorator(func):
            self.handlers.append(('message', func, kwargs))
            return func
        return decorator
    
    def callback_query_handler(self, **kwargs):
        def decorator(func):
            self.handlers.append(('callback', func, kwargs))
            return func
        return decorator

def test_debug_vs_production_mode():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è debug –∏ production —Ä–µ–∂–∏–º–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug vs production —Ä–µ–∂–∏–º–æ–≤...\n")
    
    from holidays import register_holiday_handlers
    from holidays_config import HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID
    
    # –¢–µ—Å—Ç 1: Debug —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print("üìù –¢–µ—Å—Ç 1: Debug —Ä–µ–∂–∏–º")
    debug_bot = MockBot()
    register_holiday_handlers(debug_bot, debug_mode=True)
    
    debug_handlers = len(debug_bot.handlers)
    debug_has_debug_handler = any(
        h[0] == 'message' and 'func' in h[2] and 
        h[2]['func'](MockMessage(HOLIDAYS_CHAT_ID, 999, "test"))
        for h in debug_bot.handlers
    )
    
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {debug_handlers}")
    print(f"   ‚Ä¢ Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if debug_has_debug_handler else '‚ùå'}")
    
    # –¢–µ—Å—Ç 2: Production —Ä–µ–∂–∏–º
    print("\nüìù –¢–µ—Å—Ç 2: Production —Ä–µ–∂–∏–º")
    prod_bot = MockBot()
    register_holiday_handlers(prod_bot, debug_mode=False)
    
    prod_handlers = len(prod_bot.handlers)
    prod_has_debug_handler = any(
        h[0] == 'message' and 'func' in h[2] and 
        h[2]['func'](MockMessage(HOLIDAYS_CHAT_ID, 999, "test"))
        for h in prod_bot.handlers
    )
    
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {prod_handlers}")
    print(f"   ‚Ä¢ Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if prod_has_debug_handler else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    print(f"   ‚Ä¢ Debug —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {debug_handlers}")
    print(f"   ‚Ä¢ Production —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {prod_handlers}")
    print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {debug_handlers - prod_handlers} (–æ–∂–∏–¥–∞–µ—Ç—Å—è +1 –¥–ª—è debug)")
    
    assert debug_handlers == prod_handlers + 1, f"–û–∂–∏–¥–∞–ª–∞—Å—å —Ä–∞–∑–Ω–∏—Ü–∞ –≤ 1 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–µ–Ω–æ {debug_handlers - prod_handlers}"
    assert debug_has_debug_handler, "Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –≤ debug —Ä–µ–∂–∏–º–µ"
    assert not prod_has_debug_handler, "Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –≤ production —Ä–µ–∂–∏–º–µ"
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")

def test_production_commands():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –≤ production —Ä–µ–∂–∏–º–µ"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ production —Ä–µ–∂–∏–º–µ...\n")
    
    from holidays import register_holiday_handlers
    from holidays_config import HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID
    
    # –°–æ–∑–¥–∞–µ–º production –±–æ—Ç–∞
    prod_bot = MockBot()
    register_holiday_handlers(prod_bot, debug_mode=False)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    command_handlers = {}
    for handler_type, handler_func, handler_kwargs in prod_bot.handlers:
        if handler_type == 'message' and 'commands' in handler_kwargs:
            for cmd in handler_kwargs['commands']:
                command_handlers[cmd] = handler_func
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {list(command_handlers.keys())}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    test_cases = [
        {
            "command": "–≤—ã—Ö–æ–¥–Ω–æ–π",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, 
                                 f"/–≤—ã—Ö–æ–¥–Ω–æ–π {(date.today() + timedelta(days=30)).isoformat()} —Ç–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞",
                                 12345, "test_user", "–¢–µ—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
            "expected_responses": 2  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        },
        {
            "command": "–≤—ã—Ö",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "/–≤—ã—Ö",
                                 12345, "test_user", "–¢–µ—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
            "expected_responses": 1  # –°–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö
        },
        {
            "command": "–≤—Å–µ–≤—ã—Ö",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "/–≤—Å–µ–≤—ã—Ö",
                                 12345, "test_user", "–¢–µ—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
            "expected_responses": 1  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö
        }
    ]
    
    for test_case in test_cases:
        cmd = test_case["command"]
        msg = test_case["message"]
        expected = test_case["expected_responses"]
        
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /{cmd}")
        
        initial_messages = len(prod_bot.sent_messages)
        
        if cmd in command_handlers:
            command_handlers[cmd](msg)
            
            actual_responses = len(prod_bot.sent_messages) - initial_messages
            print(f"   ‚Ä¢ –û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–æ–≤: {expected}")
            print(f"   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {actual_responses}")
            
            if actual_responses >= 1:  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
                print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{cmd} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"   ‚ùå –ö–æ–º–∞–Ω–¥–∞ /{cmd} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞")
        else:
            print(f"   ‚ùå –ö–æ–º–∞–Ω–¥–∞ /{cmd} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è production –∫–æ–º–∞–Ω–¥:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(command_handlers)}")
    print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(prod_bot.sent_messages)}")
    print(f"   ‚Ä¢ Production —Ä–µ–∂–∏–º: –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

def test_filter_accuracy():
    """–¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...\n")
    
    from holidays import is_holidays_chat_and_thread
    from holidays_config import HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID
    
    test_cases = [
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç –∏ —Ç–æ–ø–∏–∫",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "—Ç–µ—Å—Ç"),
            "expected": True
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫",
            "message": MockMessage(HOLIDAYS_CHAT_ID, 999, "—Ç–µ—Å—Ç"),
            "expected": False
        },
        {
            "name": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫",
            "message": MockMessage(-123456789, HOLIDAYS_THREAD_ID, "—Ç–µ—Å—Ç"),
            "expected": False
        },
        {
            "name": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç –∏ —Ç–æ–ø–∏–∫",
            "message": MockMessage(-123456789, 999, "—Ç–µ—Å—Ç"),
            "expected": False
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç, —Ç–æ–ø–∏–∫ None",
            "message": MockMessage(HOLIDAYS_CHAT_ID, None, "—Ç–µ—Å—Ç"),
            "expected": False
        }
    ]
    
    passed = 0
    total = len(test_cases)
    
    for test_case in test_cases:
        result = is_holidays_chat_and_thread(test_case["message"])
        expected = test_case["expected"]
        
        if result == expected:
            print(f"‚úÖ {test_case['name']}: {result}")
            passed += 1
        else:
            print(f"‚ùå {test_case['name']}: –æ–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {result}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è holidays...\n")
    
    try:
        test_debug_vs_production_mode()
        test_filter_accuracy()
        test_production_commands()
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ú–æ–¥—É–ª—å holidays –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüìù –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è debug-—Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   register_holiday_handlers(bot, debug_mode=False)")
        
        return 0
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())