#!/usr/bin/env python3
"""
Demo script for new holiday commands functionality
Demonstrates all the new features added to the holidays module
"""
import sys
import os
import json
import tempfile
sys.path.append('/home/runner/work/telegram-payment-bot/telegram-payment-bot')

from datetime import date, timedelta
from holidays import parse_flexible_date, HolidayDatabase

def demo_date_parsing():
    """Demonstrate the flexible date parsing functionality"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ò–ë–ö–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –î–ê–¢")
    print("=" * 50)
    
    today = date.today()
    print(f"–°–µ–≥–æ–¥–Ω—è: {today.strftime('%d.%m.%Y')}")
    print()
    
    test_cases = [
        ("24", "–î–µ–Ω—å (—Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü)"),
        ("15.08", "–î–µ–Ω—å –∏ –º–µ—Å—è—Ü (—ç—Ç–æ—Ç –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)"),
        ("15 08", "–î–µ–Ω—å –∏ –º–µ—Å—è—Ü —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"),
        ("25.12.2025", "–ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Å –≥–æ–¥–æ–º"),
        ("25 12 2025", "–ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã"),
        ("05.01", "–° –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏"),
        ("31.02", "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞"),
        ("abc", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    ]
    
    for date_input, description in test_cases:
        result = parse_flexible_date(date_input)
        if result:
            formatted = result.strftime("%d.%m.%Y")
            print(f"‚úÖ /–≤ {date_input:12} ({description:35}) ‚Üí {formatted}")
        else:
            print(f"‚ùå /–≤ {date_input:12} ({description:35}) ‚Üí –û—à–∏–±–∫–∞")
    
    print()

def demo_conflict_checking():
    """Demonstrate date conflict checking"""
    print("üõ°Ô∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ö–û–ù–§–õ–ò–ö–¢–û–í –î–ê–¢")
    print("=" * 50)
    
    # Create temporary database
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_file:
        json.dump({"requests": {}, "users": {}, "next_id": 1}, tmp_file)
        tmp_db_path = tmp_file.name
    
    try:
        db = HolidayDatabase(tmp_db_path)
        
        test_date = "2025-12-25"
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: {test_date}")
        
        # Check availability initially
        available = db.is_date_available(test_date)
        print(f"1. –î–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ: {'‚úÖ' if available else '‚ùå'}")
        
        # Create request
        request_id = db.create_request(12345, test_date, "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏")
        print(f"2. –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_id}")
        
        # Still available (pending)
        available = db.is_date_available(test_date)
        print(f"3. –î–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ (–∑–∞—è–≤–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏): {'‚úÖ' if available else '‚ùå'}")
        
        # Approve request
        db.update_request_status(request_id, "approved", 566901876)
        print(f"4. –ó–∞—è–≤–∫–∞ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–∞")
        
        # No longer available
        available = db.is_date_available(test_date)
        print(f"5. –î–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ (–∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞): {'‚úÖ' if available else '‚ùå'}")
        
        print("\nüí° –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç!")
        
    finally:
        os.unlink(tmp_db_path)
    
    print()

def demo_free_dates():
    """Demonstrate free dates search"""
    print("üìÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê –°–í–û–ë–û–î–ù–´–• –î–ê–¢")
    print("=" * 50)
    
    # Create temporary database with some occupied dates
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_file:
        json.dump({"requests": {}, "users": {}, "next_id": 1}, tmp_file)
        tmp_db_path = tmp_file.name
    
    try:
        db = HolidayDatabase(tmp_db_path)
        
        # Add some approved requests to occupy dates
        today = date.today()
        occupied_dates = []
        for i in [3, 7, 10]:  # Occupy some dates
            future_date = today + timedelta(days=i)
            if future_date.weekday() < 5:  # Only weekdays
                date_str = future_date.isoformat()
                request_id = db.create_request(12345, date_str, f"–ó–∞–Ω—è—Ç—ã–π –¥–µ–Ω—å {i}")
                db.update_request_status(request_id, "approved", 566901876)
                occupied_dates.append(date_str)
        
        print(f"–ó–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã: {[date.fromisoformat(d).strftime('%d.%m.%Y') for d in occupied_dates]}")
        
        # Get free dates
        free_dates = db.get_free_dates(7)
        print(f"\n7 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç:")
        for i, date_str in enumerate(free_dates, 1):
            formatted = date.fromisoformat(date_str).strftime('%d.%m.%Y (%A)')
            print(f"  {i}. {formatted}")
        
        print(f"\nüí° –ù–∞–π–¥–µ–Ω–æ {len(free_dates)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)")
        
    finally:
        os.unlink(tmp_db_path)
    
    print()

def demo_new_commands():
    """Demonstrate how the new commands work"""
    print("üöÄ –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ú–û–î–£–õ–Ø –í–´–•–û–î–ù–´–•")
    print("=" * 50)
    
    print("üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫:")
    print("  /–≤—ã—Ö–æ–¥–Ω–æ–π 2025-12-31 —Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞  (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)")
    print("  /–≤ 24 —Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞                 (–≥–∏–±–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)")
    print("  /–≤ 15.08 –æ—Ç–ø—É—Å–∫                               (–¥–µ–Ω—å + –º–µ—Å—è—Ü)")
    print("  /–≤ 25 12 2025 –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏            (–ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞)")
    
    print("\nüìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö:")
    print("  /–≤—ã—Ö                                          (–±—É–¥—É—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ)")
    print("  /–≤—Å–µ–≤—ã—Ö                                       (–≤—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ)")
    print("  /–≤—Å                                           (—Å–∏–Ω–æ–Ω–∏–º)")
    print("  /—Å–ø–∏—Å–æ–∫                                       (—Å–∏–Ω–æ–Ω–∏–º)")
    
    print("\nüîç –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç:")
    print("  /—Å–¥                                           (—Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã)")
    print("  /–¥–∞—Ç—ã                                         (—Å–∏–Ω–æ–Ω–∏–º)")
    
    print("\n‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–∞—Ç")
    print("  ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç")
    print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π –∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤")
    print("  ‚Ä¢ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç")
    print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç (28/29 —Ñ–µ–≤—Ä–∞–ª—è, 30/31 —á–∏—Å–ª–æ)")
    
    print()

def main():
    """Main demo function"""
    print("üéâ –î–ï–ú–û: –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ú–û–î–£–õ–Ø –í–´–•–û–î–ù–´–•")
    print("=" * 60)
    print()
    
    demo_date_parsing()
    demo_conflict_checking() 
    demo_free_dates()
    demo_new_commands()
    
    print("‚úÖ –í–°–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("üîó –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º")

if __name__ == "__main__":
    main()