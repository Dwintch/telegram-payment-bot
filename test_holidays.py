#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—è —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö
"""

import sys
import os
import json
import tempfile
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

def test_database_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_file:
        json.dump({"requests": {}, "users": {}, "next_id": 1}, tmp_file)
        tmp_db_path = tmp_file.name
    
    try:
        from holidays import HolidayDatabase
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = HolidayDatabase(tmp_db_path)
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "username": "test_user",
            "first_name": "–¢–µ—Å—Ç",
            "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }
        db.add_user(12345, user_data)
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        request_id = db.create_request(12345, "2024-12-31", "—Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞")
        assert request_id == 1, f"–û–∂–∏–¥–∞–ª—Å—è ID 1, –ø–æ–ª—É—á–µ–Ω {request_id}"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        request = db.get_request(request_id)
        assert request is not None, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert request["user_id"] == 12345, "–ù–µ–≤–µ—Ä–Ω—ã–π user_id"
        assert request["date"] == "2024-12-31", "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞"
        assert request["reason"] == "—Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞", "–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
        assert request["status"] == "pending", "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        success = db.update_request_status(request_id, "approved", 566901876)
        assert success, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_request = db.get_request(request_id)
        assert updated_request["status"] == "approved", "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è"
        assert updated_request["processed_by"] == 566901876, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_requests = db.get_user_requests(12345)
        assert len(user_requests) == 1, f"–û–∂–∏–¥–∞–ª–∞—Å—å 1 –∑–∞—è–≤–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(user_requests)}"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        approved_requests = db.get_all_approved_requests(12345)
        assert len(approved_requests) == 1, f"–û–∂–∏–¥–∞–ª–∞—Å—å 1 –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(approved_requests)}"
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_db_path)

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    from holidays_config import (
        HOLIDAYS_CHAT_ID,
        HOLIDAYS_THREAD_ID,
        HOLIDAYS_ADMIN_IDS,
        HOLIDAYS_DB_PATH
    )
    
    assert HOLIDAYS_CHAT_ID == -1001956037680, f"–ù–µ–≤–µ—Ä–Ω—ã–π CHAT_ID: {HOLIDAYS_CHAT_ID}"
    assert HOLIDAYS_THREAD_ID == 4, f"–ù–µ–≤–µ—Ä–Ω—ã–π THREAD_ID: {HOLIDAYS_THREAD_ID}"
    assert 566901876 in HOLIDAYS_ADMIN_IDS, f"Admin ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {HOLIDAYS_ADMIN_IDS}"
    assert HOLIDAYS_DB_PATH.endswith("holidays_db.json"), f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ –ë–î: {HOLIDAYS_DB_PATH}"
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")

def test_helper_functions():
    """–¢–µ—Å—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    from holidays import format_date, format_datetime, get_user_display_name, is_admin
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    formatted_date = format_date("2024-12-31")
    assert formatted_date == "31.12.2024", f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã: {formatted_date}"
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    test_datetime = "2024-12-31T15:30:00"
    formatted_datetime = format_datetime(test_datetime)
    assert "31.12.2024 15:30" in formatted_datetime, f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {formatted_datetime}"
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {"first_name": "–ò–≤–∞–Ω", "last_name": "–ü–µ—Ç—Ä–æ–≤"}
    display_name = get_user_display_name(user_data)
    assert display_name == "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è: {display_name}"
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    assert is_admin(566901876), "Admin –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
    assert not is_admin(123456), "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å admin"
    
    print("‚úÖ –í—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockBot:
        def __init__(self):
            self.handlers = []
        
        def message_handler(self, **kwargs):
            def decorator(func):
                self.handlers.append(('message', func, kwargs))
                return func
            return decorator
        
        def callback_query_handler(self, **kwargs):
            def decorator(func):
                self.handlers.append(('callback', func, kwargs))
                return func
            return decorator
    
    mock_bot = MockBot()
    
    from holidays import register_holiday_handlers
    register_holiday_handlers(mock_bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    assert len(mock_bot.handlers) >= 4, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 4 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(mock_bot.handlers)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    command_handlers = [h for h in mock_bot.handlers if h[0] == 'message' and 'commands' in h[2]]
    callback_handlers = [h for h in mock_bot.handlers if h[0] == 'callback']
    
    assert len(command_handlers) >= 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 3 –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ª—É—á–µ–Ω–æ {len(command_handlers)}"
    assert len(callback_handlers) >= 1, f"–û–∂–∏–¥–∞–ª—Å—è –º–∏–Ω–∏–º—É–º 1 callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–µ–Ω–æ {len(callback_handlers)}"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö...\n")
    
    try:
        test_config()
        test_database_operations()
        test_helper_functions()
        test_integration()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ú–æ–¥—É–ª—å —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())