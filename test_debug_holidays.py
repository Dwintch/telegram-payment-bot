#!/usr/bin/env python3
"""
–¢–µ—Å—Ç debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è holidays
"""

import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

class MockMessage:
    """–§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self, chat_id, thread_id=None, text="test", user_id=12345):
        self.chat = MockChat(chat_id)
        self.message_thread_id = thread_id
        self.text = text
        self.from_user = MockUser(user_id)

class MockChat:
    def __init__(self, chat_id):
        self.id = chat_id

class MockUser:
    def __init__(self, user_id, username="test_user", first_name="Test", last_name="User"):
        self.id = user_id
        self.username = username
        self.first_name = first_name
        self.last_name = last_name

class MockBot:
    """–§–∏–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.sent_messages = []
        self.handlers = []
    
    def send_message(self, chat_id, text, message_thread_id=None, reply_markup=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.sent_messages.append({
            'chat_id': chat_id,
            'text': text,
            'thread_id': message_thread_id,
            'reply_markup': reply_markup,
            'timestamp': datetime.now()
        })
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}, —Ç–æ–ø–∏–∫ {message_thread_id}:")
        print(f"   {text[:100]}{'...' if len(text) > 100 else ''}")
    
    def reply_to(self, message, text, reply_markup=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.send_message(message.chat.id, text, message.message_thread_id, reply_markup)
    
    def message_handler(self, **kwargs):
        def decorator(func):
            self.handlers.append(('message', func, kwargs))
            return func
        return decorator
    
    def callback_query_handler(self, **kwargs):
        def decorator(func):
            self.handlers.append(('callback', func, kwargs))
            return func
        return decorator

def test_debug_functionality():
    """–¢–µ—Å—Ç debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è holidays...\n")
    
    from holidays import register_holiday_handlers, is_holidays_chat_and_thread
    from holidays_config import HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID
    
    # –°–æ–∑–¥–∞–µ–º mock-–±–æ—Ç–∞
    mock_bot = MockBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_holiday_handlers(mock_bot)
    
    print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(mock_bot.handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    test_cases = [
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞",
            "message": MockMessage(HOLIDAYS_CHAT_ID, HOLIDAYS_THREAD_ID, "/–≤—ã—Ö–æ–¥–Ω–æ–π 2024-12-31 —Ç–µ—Å—Ç"),
            "should_match": True
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞",
            "message": MockMessage(HOLIDAYS_CHAT_ID, 999, "—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            "should_match": False
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞",
            "message": MockMessage(-123456789, HOLIDAYS_THREAD_ID, "—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            "should_match": False
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–æ–ø–∏–∫–∞",
            "message": MockMessage(HOLIDAYS_CHAT_ID, None, "—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            "should_match": False
        }
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ is_holidays_chat_and_thread:")
    for test_case in test_cases:
        print(f"\nüìù {test_case['name']}")
        result = is_holidays_chat_and_thread(test_case['message'])
        expected = test_case['should_match']
        
        if result == expected:
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {result}")
        else:
            print(f"   ‚ùå –û–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {result}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
    
    # –ù–∞—Ö–æ–¥–∏–º debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    debug_handler = None
    for handler_type, handler_func, handler_kwargs in mock_bot.handlers:
        if handler_type == 'message' and 'func' in handler_kwargs:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            test_message = MockMessage(HOLIDAYS_CHAT_ID, 999, "–¢–µ—Å—Ç–æ–≤–æ–µ debug-—Å–æ–æ–±—â–µ–Ω–∏–µ")
            if handler_kwargs['func'](test_message):
                debug_handler = handler_func
                break
    
    if debug_handler:
        print("   ‚úÖ Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        test_message = MockMessage(HOLIDAYS_CHAT_ID, 999, "–¢–µ—Å—Ç–æ–≤–æ–µ debug-—Å–æ–æ–±—â–µ–Ω–∏–µ")
        debug_handler(test_message)
        
        if mock_bot.sent_messages:
            print(f"   ‚úÖ Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç")
            last_message = mock_bot.sent_messages[-1]
            if "DEBUG" in last_message['text']:
                print(f"   ‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç debug-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            else:
                print(f"   ‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç debug-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        else:
            print(f"   ‚ùå Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç")
    else:
        print("   ‚ùå Debug-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(mock_bot.handlers)}")
    print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(mock_bot.sent_messages)}")
    print(f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: Chat ID={HOLIDAYS_CHAT_ID}, Thread ID={HOLIDAYS_THREAD_ID}")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        test_debug_functionality()
        print("\nüéâ –í—Å–µ debug-—Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ debug-—Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())