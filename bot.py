import os
import logging
from datetime import datetime
import requests

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–ê–ì–†–£–ó–ö–ê .ENV ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 64
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'

# –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
EMPLOYEES_LIST = ['–î–∞–Ω–∏–ª', '–î–∞–Ω–∏–∑', '–î–∞—à–∞', '–û–∫—Å–∞–Ω–∞', '–õ–∏–∑–∞', '–°–æ–Ω—è']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –ü–û–ì–û–î–ê ===
def get_weather():
    # –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π API –∫–ª—é—á OpenWeatherMap –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenWeatherMap –Ω–∞ –ì–µ–ª–µ–Ω–¥–∂–∏–∫
    API_KEY = os.getenv("OPENWEATHER_API_KEY")
    if not API_KEY:
        return None

    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q=Gelendzhik&units=metric&appid={API_KEY}&lang=ru"
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            weather = {
                "temp": data['main']['temp'],
                "humidity": data['main']['humidity'],
                "wind_speed": data['wind']['speed'],
                "description": data['weather'][0]['description'].capitalize()
            }
            return weather
        else:
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return None

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup

def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_order_action_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    markup.add("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_employee_selection_menu(shop):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        # –î–ª—è –Ø–Ω—Ç–∞—Ä—è –≤—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        for emp in EMPLOYEES_LIST:
            markup.add(emp)
        markup.add("–ì–æ—Ç–æ–≤–æ")
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö ‚Äî –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        for emp in EMPLOYEES_LIST:
            markup.add(emp)
    return markup

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def sanitize_input(text):
    items = []
    for part in text.split(','):
        items.extend([x.strip() for x in part.split('\n') if x.strip()])
    return items

def format_order_list(items):
    if not items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    return "üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)

def round_to_50(value):
    remainder = value % 50
    if remainder < 25:
        return int(value - remainder)
    else:
        return int(value + (50 - remainder))

# === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ===
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    caption = message.caption or ""
    if not user:
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã –Ω–µ –≤ —Å–µ—Å—Å–∏–∏.")
        return

    stage = user.get("stage")
    if stage not in ["order_input", "delivery_confirm"]:
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–∏–µ–º–∫—É.")
        return

    file_id = message.photo[-1].file_id

    if stage == "order_input":
        user.setdefault("order_photos", []).append({"file_id": file_id, "caption": caption})
        if caption:
            user["order_items"].append(caption)
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É!")
    elif stage == "delivery_confirm":
        user.setdefault("delivery_photos", []).append({"file_id": file_id, "caption": caption})
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏.")

# === –û–ë–†–ê–ë–û–¢–ö–ê /START ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "shop": None,
        "order_shop": None,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "choose_shop",
        "date": datetime.now().strftime("%d.%m.%Y"),
        "order_items": [],
        "order_photos": [],
        "order_date": None,
        "pending_delivery": [],
        "accepted_delivery": [],
        "last_order": [],
        "saved_order": [],
        "employees": [],
        "employee_selection_done": False
    }
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())

# === –í–´–ë–û–† –ú–ê–ì–ê–ó–ò–ù–ê ===
@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"])
def choose_shop(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get("stage") == "choose_shop":
        user_data[chat_id] = user or {}
        user_data[chat_id].update({
            "shop": message.text,
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_shop": None,
            "order_items": [],
            "order_photos": [],
            "order_date": None,
            "pending_delivery": [],
            "accepted_delivery": [],
            "employees": [],
            "employee_selection_done": False
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: <b>{message.text}</b>", reply_markup=get_main_menu())
        return

    # –ó–∞–∫–∞–∑—ã ‚Äî –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
    if user.get("stage") == "choose_shop_order":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            user["order_items"] = []
            user["order_photos"] = []
            user["stage"] = "order_input"
            bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: <b>{message.text}</b>\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:", reply_markup=None)
            return

    # –ü—Ä–∏—ë–º–∫–∞ ‚Äî –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
    if user.get("stage") == "choose_shop_delivery":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ last_order –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            pending = []
            for u in user_data.values():
                if u.get("order_shop") == message.text and u.get("last_order"):
                    pending.extend(u["last_order"])
            pending = list(set(pending))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

            if "accepted_delivery" not in user:
                user["accepted_delivery"] = []
            user["pending_delivery"] = [item for item in pending if item not in user["accepted_delivery"]]

            if user["pending_delivery"]:
                items_list = "\n".join(f"‚Ä¢ {item}" for item in user["pending_delivery"])
                bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n{items_list}")
                user["stage"] = "delivery_confirm"
            else:
                bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
                user["stage"] = "main"
            return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu())

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    user = user_data.get(chat_id)

    if not user:
        start(message)
        return

    # === –ó–ê–ö–ê–ó–´ ===
    if text == "üõç –ó–∞–∫–∞–∑":
        if user.get("saved_order"):
            user["order_items"] = user["saved_order"].copy()
            user["stage"] = "order_input"
            order_text = format_order_list(user["order_items"])
            bot.send_message(chat_id,
                             f"üíæ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑:\n{order_text}\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º.",
                             reply_markup=get_order_action_menu())
        else:
            user["stage"] = "choose_shop_order"
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "order_input":
        if text in ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
                    return
                send_order(chat_id)
                user["saved_order"] = []
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
                return

            if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
                    return
                bot.send_message(chat_id,
                                 "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                                 "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å—ë', '–æ—á–∏—Å—Ç–∏—Ç—å', '—Å–±—Ä–æ—Å–∏—Ç—å'.")
                user["stage"] = "order_edit"
                return

            if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
                    return
                user["saved_order"] = user["order_items"].copy()
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª.", reply_markup=get_main_menu())
                return

            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
                return

        else:
            items = sanitize_input(text)
            if items:
                user["order_items"].extend(items)
                order_text = format_order_list(user["order_items"])
                bot.send_message(chat_id, order_text)
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return

    if user["stage"] == "order_edit":
        text_lower = text.lower()
        if any(word in text_lower for word in ["—É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "—É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "–æ—á–∏—Å—Ç–∏—Ç—å", "—Å–±—Ä–æ—Å–∏—Ç—å"]):
            user["order_items"] = []
            bot.send_message(chat_id, "üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω.")
        else:
            to_delete = sanitize_input(text)
            initial_len = len(user["order_items"])
            remaining = []
            for order_item in user["order_items"]:
                if not any(order_item.lower() == del_item.lower() for del_item in to_delete):
                    remaining.append(order_item)
            deleted_count = initial_len - len(remaining)
            user["order_items"] = remaining
            if deleted_count:
                bot.send_message(chat_id, f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {deleted_count}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        order_text = format_order_list(user["order_items"])
        bot.send_message(chat_id, order_text)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        user["stage"] = "order_input"
        return

    # === –ü–†–ò–ï–ú –ü–û–°–¢–ê–í–ö–ò ===
    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        user["stage"] = "choose_shop_delivery"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "delivery_confirm":
        arrived = sanitize_input(text)

        invalid_items = [item for item in arrived if item not in user.get("pending_delivery", [])]
        if invalid_items:
            bot.send_message(chat_id, f"‚ö†Ô∏è –¢–æ–≤–∞—Ä(—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω(—ã) –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö: {', '.join(invalid_items)}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ.")
            return

        not_arrived = [item for item in user.get("pending_delivery", []) if item not in arrived]

        user.setdefault("accepted_delivery", [])
        for item in arrived:
            if item not in user["accepted_delivery"]:
                user["accepted_delivery"].append(item)

        user["pending_delivery"] = not_arrived

        if arrived:
            bot.send_message(chat_id, f"–û—Ç–º–µ—á–µ–Ω–æ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–º:\n" + "\n".join(f"‚Ä¢ {item}" for item in arrived))
        else:
            bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")

        if not_arrived:
            bot.send_message(chat_id, "–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É.")
        else:
            bot.send_message(chat_id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω—è—Ç—ã.")
            user["accepted_delivery"] = []

        user["stage"] = "main"
        return

    # === –§–ò–ù–ê–ù–°–´ ===
    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main", "employees": [], "employee_selection_done": False})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        user["employees"] = []
        user["employee_selection_done"] = False
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        user["employees"] = []
        user["employee_selection_done"] = False
        bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É:")
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        count = len(user["transfers"])
        bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}‚ÇΩ</b>\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        if not user["transfers"] and user["cash"] == 0 and user["terminal"] == 0:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
            return

        if not user["employee_selection_done"]:
            user["stage"] = "employee_select"
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
            shop = user.get("shop")
            if shop == "–Ø–Ω—Ç–∞—Ä—å":
                bot.send_message(chat_id,
                                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è (–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏).\n"
                                 "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>.", reply_markup=get_employee_selection_menu(shop))
            else:
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è:", reply_markup=get_employee_selection_menu(shop))
            return

        send_report(chat_id)
        return

    # –í–≤–æ–¥ —Å—É–º–º—ã –Ω–∞–ª–∏—á–Ω—ã—Ö –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    if user["stage"] == "amount_input":
        # –û–∂–∏–¥–∞–µ–º —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö, –∑–∞—Ç–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        try:
            val = int(text.replace(" ", "").replace("‚ÇΩ", ""))
            if val < 0:
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
        except Exception:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        if user["cash"] == 0:
            user["cash"] = val
            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:")
            return
        elif user["terminal"] == 0:
            user["terminal"] = val
            # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            user["stage"] = "employee_select"
            shop = user.get("shop")
            if shop == "–Ø–Ω—Ç–∞—Ä—å":
                bot.send_message(chat_id,
                                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è (–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏).\n"
                                 "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>.", reply_markup=get_employee_selection_menu(shop))
            else:
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è:", reply_markup=get_employee_selection_menu(shop))
            return

    # –í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if user["stage"] == "employee_select":
        if text == "–ì–æ—Ç–æ–≤–æ" and user.get("shop") == "–Ø–Ω—Ç–∞—Ä—å":
            if len(user["employees"]) != 2:
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ø–Ω—Ç–∞—Ä—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–æ—Ä.")
                return
            user["employee_selection_done"] = True
            send_report(chat_id)
            return

        if text in EMPLOYEES_LIST:
            if user.get("shop") == "–Ø–Ω—Ç–∞—Ä—å":
                if text in user["employees"]:
                    bot.send_message(chat_id, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {text} —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
                    return
                if len(user["employees"]) < 2:
                    user["employees"].append(text)
                    bot.send_message(chat_id, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {text} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
                else:
                    bot.send_message(chat_id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 2 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
            else:
                user["employees"] = [text]
                user["employee_selection_done"] = True
                send_report(chat_id)
            return

        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# === –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –û–¢–ß–Å–¢–û–í –ò –ó–ê–ö–ê–ó–û–í ===

def send_report(chat_id):
    user = user_data.get(chat_id)
    if not user:
        return

    shop = user.get("shop")
    transfers = user.get("transfers", [])
    mode = user.get("mode")
    cash = user.get("cash")
    terminal = user.get("terminal")
    employees = user.get("employees")
    date = user.get("date")

    total_transfers = sum(transfers)
    if mode == "subtract":
        total_transfers = -total_transfers

    weather = get_weather()
    weather_text = ""
    if weather:
        weather_text = (f"\nüå°Ô∏è –ü–æ–≥–æ–¥–∞: {weather['description']}, {weather['temp']}¬∞C, "
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%, –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å")

    # –û–∫—Ä—É–≥–ª—è–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 50 (–ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–∞–≤–∏–ª—É)
    cash_rounded = round_to_50(cash)
    terminal_rounded = round_to_50(terminal)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    report_text = f"""
<b>üìÖ –û—Ç—á—ë—Ç –∑–∞ {date}</b>
<b>–ú–∞–≥–∞–∑–∏–Ω:</b> {shop}
<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:</b> {', '.join(employees)}
<b>–ü–µ—Ä–µ–≤–æ–¥—ã:</b> {total_transfers}‚ÇΩ
<b>–ù–∞–ª–∏—á–Ω—ã–µ:</b> {cash_rounded}‚ÇΩ
<b>–¢–µ—Ä–º–∏–Ω–∞–ª:</b> {terminal_rounded}‚ÇΩ
{weather_text}
"""

    # –õ–æ–≥–∏–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        report_text += f"\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ 2 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {', '.join(employees)}"
    else:
        report_text += f"\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employees[0] if employees else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets
    try:
        sheet.append_row([
            date, shop, ', '.join(employees), total_transfers, cash_rounded, terminal_rounded,
            weather_text.replace("\n", " ")
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    bot.send_message(chat_id, report_text, reply_markup=get_main_menu())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å —Ç–æ–ø–∏–∫–æ–º
    try:
        bot.send_message(CHAT_ID_FOR_REPORT, report_text, message_thread_id=THREAD_ID_FOR_REPORT)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ —á–∞—Ç: {e}")

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    user.update({
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "main",
        "employees": [],
        "employee_selection_done": False,
        "date": datetime.now().strftime("%d.%m.%Y")
    })

def send_order(chat_id):
    user = user_data.get(chat_id)
    if not user or not user.get("order_items"):
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    shop = user.get("order_shop")
    items = user.get("order_items")
    photos = user.get("order_photos", [])

    order_text = f"<b>–ó–∞–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {shop}:</b>\n"
    for i, item in enumerate(items, 1):
        order_text += f"{i}. {item}\n"

    try:
        bot.send_message(CHAT_ID_FOR_REPORT, order_text, message_thread_id=THREAD_ID_FOR_ORDER)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        for p in photos:
            bot.send_photo(CHAT_ID_FOR_REPORT, p["file_id"], caption=p.get("caption", ""), message_thread_id=THREAD_ID_FOR_ORDER)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    user["last_order"] = items.copy()
    user["order_items"] = []
    user["order_photos"] = []
    user["order_shop"] = None

# === –†–ê–ë–û–¢–ê –° –ü–ï–†–ï–í–û–î–ê–ú–ò ===
@bot.message_handler(func=lambda m: m.text and m.text.replace(' ', '').isdigit())
def handle_number(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    if not user:
        start(message)
        return

    if user["stage"] != "amount_input":
        return

    try:
        val = int(message.text.replace(" ", ""))
    except:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    if val < 0:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    if user["cash"] == 0:
        user["cash"] = val
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:")
        return
    elif user["terminal"] == 0:
        user["terminal"] = val
        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        user["stage"] = "employee_select"
        shop = user.get("shop")
        if shop == "–Ø–Ω—Ç–∞—Ä—å":
            bot.send_message(chat_id,
                             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è (–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏).\n"
                             "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>.", reply_markup=get_employee_selection_menu(shop))
        else:
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è:", reply_markup=get_employee_selection_menu(shop))
        return

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    bot.infinity_polling()
