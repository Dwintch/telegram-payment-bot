import os
import json
import logging
from datetime import datetime
from collections import defaultdict

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–ê–ì–†–£–ó–ö–ê .ENV ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 4
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑")
    return markup

def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def sanitize_input(text):
    return [item.strip() for item in text.split(',') if item.strip()]

# === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ===
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get("stage") != "order_input":
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑.")
        return
    file_id = message.photo[-1].file_id
    user.setdefault("order_photos", []).append(file_id)
    bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–∫–∞–∑—É!")

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_data:
        user_data[chat_id] = {
            "shop": None,                # –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            "order_shop": None,          # –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "choose_shop",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_items": [],
            "order_photos": [],
            "order_date": None,
            "pending_delivery": [],
            "last_order": []
        }
        bot.send_message(chat_id, "–ù—É —á—Ç–æ, –ø–æc—á–∏—Ç–∞–µ–º –∫–æ–ø–µ–µ—á–∫–∏! –í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_shop_menu())
        return

    user = user_data[chat_id]

    # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω)
    if user["stage"] == "choose_shop" and text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]:
        user.update({
            "shop": text,
            "transfers": [],
            "order_items": [],
            "pending_delivery": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_shop": None,
            "order_photos": [],
            "order_date": None
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{text}</b>", reply_markup=get_main_menu())
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "üõç –ó–∞–∫–∞–∑" ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    if text == "üõç –ó–∞–∫–∞–∑":
        user["stage"] = "order_choose_shop"
        bot.send_message(chat_id,
                         "–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä —Å–ª–æ–≤–∞–º–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –ü–†–ò–ö–†–ï–ü–õ–Ø–ô–¢–ï –§–û–¢–û –¢–û–í–ê–†–ê!\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu())
        return

    # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
    if user["stage"] == "order_choose_shop" and text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]:
        user["order_shop"] = text
        user["order_items"] = []
        user["order_photos"] = []
        user["order_date"] = datetime.now().strftime("%d.%m.%Y")
        user["stage"] = "order_input"
        bot.send_message(chat_id,
                         f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: <b>{text}</b>\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑ (—Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return

    # –í–≤–æ–¥ –∑–∞–∫–∞–∑–∞ (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    if user["stage"] == "order_input" and text != "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        items = sanitize_input(text)
        user["order_items"].extend(items)
        user["last_order"] = items[:]
        bot.send_message(chat_id, "üõí –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫–∞–∑:")
        for item in items:
            bot.send_message(chat_id, f"‚Ä¢ {item}")
        bot.send_message(chat_id, "–ú–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", reply_markup=get_confirm_menu())
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
    if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å" and user["stage"] == "order_input":
        send_order(chat_id)
        user["stage"] = "main"
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–ø–µ—Ä–µ–≤–æ–¥—ã, –æ—Ç—á—ë—Ç—ã, –ø—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä—ã, –æ—Ç–º–µ–Ω–∞)
    if text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]:
        # –ú–µ–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∑–∞–∫–∞–∑
        user.update({
            "shop": text,
            "transfers": [],
            "order_items": [],
            "pending_delivery": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y")
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{text}</b>", reply_markup=get_main_menu())
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main"})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É:")
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        count = len(user["transfers"])
        bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}‚ÇΩ</b>\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        user["stage"] = "cash_input"
        total = sum(user["transfers"])
        bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{total}‚ÇΩ</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
        return

    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        if user["pending_delivery"]:
            items = "\n".join(f"‚Ä¢ {item}" for item in user["pending_delivery"])
            bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–æ (–≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n{items}")
            user["stage"] = "delivery_confirm"
        else:
            bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É.")
        return

    if text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑":
        if user["last_order"]:
            user["order_items"].extend(user["last_order"])
            bot.send_message(chat_id, "üîÅ –ó–∞–∫–∞–∑ –ø–æ–≤—Ç–æ—Ä—ë–Ω.")
            for item in user["last_order"]:
                bot.send_message(chat_id, f"‚Ä¢ {item}")
        else:
            bot.send_message(chat_id, "–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        user["stage"] = "cash_input"
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã—Ö?:")
        return

    if text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
        user["stage"] = "custom_date_input"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Ç—á—ë—Ç–∞
    if user["stage"] == "custom_date_input":
        try:
            custom_date = datetime.strptime(text, "%d.%m.%Y")
            user["date"] = custom_date.strftime("%d.%m.%Y")
            user["stage"] = "confirm_report"
            bot.send_message(chat_id, f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{user['date']}</b>")
            preview_report(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ‚Äî —Å—É–º–º—ã
    if text.isdigit():
        amount = int(text)
        if user["stage"] in ["main", "amount_input"]:
            user["transfers"].append(-amount if user["mode"] == "subtract" else amount)
            bot.send_message(chat_id, f"{'‚ûñ –í–æ–∑–≤—Ä–∞—Ç' if user['mode']=='subtract' else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'}: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            user["mode"] = "add"
            user["stage"] = "main"
            return

        elif user["stage"] == "cash_input":
            user["cash"] = amount
            user["stage"] = "terminal_input"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
            return

        elif user["stage"] == "terminal_input":
            user["terminal"] = amount
            user["stage"] = "confirm_report"
            preview_report(chat_id)
            return

    # –ï—Å–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –≤–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
    if user["stage"] == "main":
        items = sanitize_input(text)
        if items:
            user["order_items"].extend(items)
            bot.send_message(chat_id, "üõí –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑:")
            for item in items:
                bot.send_message(chat_id, f"‚Ä¢ {item}")
        return

    # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏–º
    if user["stage"] == "confirm_report":
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        return

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –ª—é–±–æ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

# === –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ===
def round_to_50(value):
    remainder = value % 50
    return int(value - remainder) if remainder < 25 else int(value + (50 - remainder))

def preview_report(chat_id):
    data = user_data[chat_id]
    transfers = sum(data["transfers"])
    total = transfers + data["cash"] + data["terminal"]
    if data["shop"] == "–Ø–Ω—Ç–∞—Ä—å":
        each = round_to_50((total * 0.10) / 2) if total >= 40000 else 2000
        salary = each * 2
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ\nüë§ –ü–æ {each}‚ÇΩ –∫–∞–∂–¥–æ–º—É"
    else:
        salary = max(2000, round_to_50(total * 0.10))
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ"
    report = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {data['shop']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {data['cash']}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {data['terminal']}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n{salary_text}"
    )
    bot.send_message(chat_id, report, reply_markup=get_confirm_menu())

def send_report(chat_id):
    data = user_data[chat_id]
    row = [data["date"], data["shop"], sum(data["transfers"]), data["cash"], data["terminal"]]
    sheet.append_row(row)
    total = sum(data["transfers"]) + data["cash"] + data["terminal"]
    report = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {data['shop']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {row[2]}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {row[3]}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {row[4]}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    )
    bot.send_message(CHAT_ID_FOR_REPORT, report, message_thread_id=THREAD_ID_FOR_REPORT)
    user_data[chat_id] = {
        "shop": user["shop"],  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞
        "order_shop": None,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "main",
        "date": datetime.now().strftime("%d.%m.%Y"),
        "order_items": [],
        "order_photos": [],
        "order_date": None,
        "pending_delivery": [],
        "last_order": []
    }
    bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

def send_order(chat_id):
    user = user_data[chat_id]
    items = user.get("order_items", [])
    photos = user.get("order_photos", [])
    shop = user.get("order_shop") or user.get("shop")
    date = user.get("order_date") or datetime.now().strftime("%d.%m.%Y")

    if not items and not photos:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑.")
        return

    message = f"üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\nüì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\nüìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date}\n"
    if items:
        message += "\n" + "\n".join(f"‚Ä¢ {item}" for item in items)

    msg = bot.send_message(CHAT_ID_FOR_REPORT, message, message_thread_id=THREAD_ID_FOR_ORDER)

    for file_id in photos:
        bot.send_photo(CHAT_ID_FOR_REPORT, file_id, reply_to_message_id=msg.message_id)

    # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–∏–Ω—è—Ç—å)
    user["pending_delivery"] = items[:]
    user["order_items"] = []
    user["order_photos"] = []
    user["order_date"] = None
    user["order_shop"] = None

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
