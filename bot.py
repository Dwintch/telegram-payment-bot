import os
from dotenv import load_dotenv
import telebot
from telebot import types
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = int(os.getenv("CHAT_ID_FOR_REPORT"))
THREAD_ID_FOR_REPORT = int(os.getenv("THREAD_ID_FOR_REPORT"))
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup

def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

# === START ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "shop": None,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "choose_shop",
        "date": datetime.now().strftime("%d.%m.%Y")
    }
    bot.send_message(chat_id, "–ù—É —á—Ç–æ –ø–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ø–µ–µ—á–∫–∏! –í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_shop_menu())

# === –í–´–ë–û–† –ú–ê–ì–ê–ó–ò–ù–ê ===
@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"])
def choose_shop(message):
    chat_id = message.chat.id
    user_data[chat_id].update({
        "shop": message.text,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "main",
        "date": datetime.now().strftime("%d.%m.%Y")
    })
    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: {message.text}", reply_markup=get_main_menu())

# === –û–¢–ú–ï–ù–ê ===
@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
    chat_id = message.chat.id
    if user_data.get(chat_id, {}).get("shop"):
        user_data[chat_id].update({
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y")
        })
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_shop_menu())

# === –ü–ï–†–ï–í–û–î / –í–û–ó–í–†–ê–¢ ===
@bot.message_handler(func=lambda m: m.text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥")
def handle_transfer(message):
    chat_id = message.chat.id
    user_data[chat_id]["mode"] = "add"
    user_data[chat_id]["stage"] = "amount_input"
    bot.send_message(chat_id, "–û–ø –µ—â–µ –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")

@bot.message_handler(func=lambda m: m.text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
def handle_return(message):
    chat_id = message.chat.id
    user_data[chat_id]["mode"] = "subtract"
    user_data[chat_id]["stage"] = "amount_input"
    bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤–∞—Ç –Ω–∞ —Å—É–º–º—É:")

@bot.message_handler(func=lambda m: m.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
def show_total(message):
    chat_id = message.chat.id
    total = sum(user_data.get(chat_id, {}).get("transfers", []))
    count = len(user_data.get(chat_id, {}).get("transfers", []))
    bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total}‚ÇΩ\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")

@bot.message_handler(func=lambda m: m.text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
def start_report(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        start(message)
        return
    total = sum(user_data[chat_id]["transfers"])
    user_data[chat_id]["stage"] = "cash_input"
    bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: {total}‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")

# === –í–í–û–î –°–£–ú–ú ===
@bot.message_handler(func=lambda m: m.text.isdigit())
def handle_amount(message):
    chat_id = message.chat.id
    stage = user_data.get(chat_id, {}).get("stage", "main")
    mode = user_data[chat_id].get("mode", "add")
    amount = int(message.text)

    if stage in ["main", "amount_input"]:
        if mode == "subtract":
            user_data[chat_id]["transfers"].append(-amount)
            bot.send_message(chat_id, f"‚ûñ –í–æ–∑–≤—Ä–∞—Ç: {amount}‚ÇΩ")
        else:
            user_data[chat_id]["transfers"].append(amount)
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}‚ÇΩ")

        total = sum(user_data[chat_id]["transfers"])
        bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ", reply_markup=get_main_menu())
        user_data[chat_id]["mode"] = "add"
        user_data[chat_id]["stage"] = "main"

    elif stage == "cash_input":
        user_data[chat_id]["cash"] = amount
        user_data[chat_id]["stage"] = "terminal_input"
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∫–∞–ø–Ω—É–ª–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")

    elif stage == "terminal_input":
        user_data[chat_id]["terminal"] = amount
        user_data[chat_id]["stage"] = "confirm_report"
        preview_report(chat_id)

# === –û–ö–†–£–ì–õ–ï–ù–ò–ï –î–û 50 ===
def round_to_50(value):
    remainder = value % 50
    if remainder < 25:
        return int(value - remainder)
    else:
        return int(value + (50 - remainder))

# === –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –û–¢–ß–ï–¢–ê ===
def preview_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    date = data["date"]

    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        if total < 40000:
            salary = 4000
            each = salary // 2
        else:
            each = round_to_50((total * 0.10) / 2)
            salary = each * 2
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ\nüë§ –ü–æ {each}‚ÇΩ –∫–∞–∂–¥–æ–º—É"
    else:
        salary = max(2000, round_to_50(total * 0.10))
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ"

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n"
        f"{salary_text}"
    )

    bot.send_message(chat_id, report_text, reply_markup=get_confirm_menu())

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï / –ò–ó–ú–ï–ù–ï–ù–ò–ï / –û–¢–ú–ï–ù–ê ===
@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
def confirm_and_send(message):
    chat_id = message.chat.id
    send_report(chat_id)
    user_data[chat_id]["stage"] = "main"
    user_data[chat_id]["transfers"] = []
    user_data[chat_id]["cash"] = 0
    user_data[chat_id]["terminal"] = 0
    bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=get_main_menu())

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def edit_data(message):
    chat_id = message.chat.id
    user_data[chat_id]["stage"] = "amount_input"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:")

@bot.message_handler(func=lambda m: m.text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É")
def change_date(message):
    chat_id = message.chat.id
    user_data[chat_id]["stage"] = "date_input"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("stage") == "date_input")
def set_date(message):
    chat_id = message.chat.id
    date_str = message.text
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        user_data[chat_id]["date"] = date_str
        user_data[chat_id]["stage"] = "confirm_report"
        preview_report(chat_id)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

def send_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    date = data["date"]

    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        if total < 40000:
            salary = 4000
            each = salary // 2
        else:
            each = round_to_50((total * 0.10) / 2)
            salary = each * 2
    else:
        salary = max(2000, round_to_50(total * 0.10))

    # –ó–∞–ø–∏—Å—å –≤ Google Sheets
    row = [date, shop, transfers, cash, terminal, total, salary]
    sheet.append_row(row)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ —á–∞—Ç
    report_msg = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n"
        f"üëî –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}‚ÇΩ"
    )

    bot.send_message(CHAT_ID_FOR_REPORT, report_msg)

def run_bot1():
    print("‚úÖ –ë–æ—Ç 1 –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
