import os
import json
import logging
from datetime import datetime

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests

# === –ó–ê–ì–†–£–ó–ö–ê .ENV ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 64
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'
WEATHER_API_KEY = "0657e04209d46b14a466de79282d9ca7"
WEATHER_CITY = "Gelendzhik"  # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

# === –°–ü–ò–°–û–ö –°–û–¢–†–£–î–ù–ò–ö–û–í ===
EMPLOYEES = ['–î–∞–Ω–∏–ª', '–î–∞–Ω–∏–∑', '–î–∞—à–∞', '–û–∫—Å–∞–Ω–∞', '–õ–∏–∑–∞', '–°–æ–Ω—è']

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup

def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_order_action_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    markup.add("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

# === –ú–ï–ù–Æ –í–´–ë–û–†–ê –ü–ï–†–°–û–ù–ê–õ–ê ===
def get_employee_selection_menu(selected=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    selected = selected or []
    for emp in EMPLOYEES:
        label = f"{emp} ‚úÖ" if emp in selected else emp
        markup.add(label)
    markup.add("–ì–æ—Ç–æ–≤–æ", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def ask_for_employees(chat_id):
    user = user_data[chat_id]
    user["selected_employees"] = []
    user["stage"] = "choose_employee"
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞(–æ–≤):", reply_markup=get_employee_selection_menu())

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("stage") == "choose_employee")
def handle_employee_selection(message):
    chat_id = message.chat.id
    user = user_data[chat_id]
    text = message.text

    if text == "–ì–æ—Ç–æ–≤–æ":
        shop = user["shop"]
        selected = user.get("selected_employees", [])

        if shop == "–Ø–Ω—Ç–∞—Ä—å" and len(selected) != 2:
            bot.send_message(chat_id, "–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –Ø–Ω—Ç–∞—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë.")
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞(–æ–≤):", reply_markup=get_employee_selection_menu(selected))
            return
        elif shop in ["–•–∞–π–ø", "–ü–æ–ª–∫–∞"] and len(selected) != 1:
            bot.send_message(chat_id, "–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –•–∞–π–ø –∏ –ü–æ–ª–∫–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë.")
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞(–æ–≤):", reply_markup=get_employee_selection_menu(selected))
            return

        user["employees"] = selected
        user["stage"] = "confirm_report"
        preview_report(chat_id)
        return

    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user["stage"] = "main"
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", reply_markup=get_main_menu())
        return

    if text in EMPLOYEES:
        selected = user.get("selected_employees", [])
        if text in selected:
            selected.remove(text)
        else:
            selected.append(text)
        user["selected_employees"] = selected
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞(–æ–≤):", reply_markup=get_employee_selection_menu(selected))
        return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def sanitize_input(text):
    items = []
    for part in text.split(','):
        items.extend([x.strip() for x in part.split('\n') if x.strip()])
    return items

def format_order_list(items):
    if not items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    return "üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)

def round_to_50(value):
    remainder = value % 50
    if remainder < 25:
        return int(value - remainder)
    else:
        return int(value + (50 - remainder))

# === –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–ì–û–î–´ ===
def get_weather():
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={WEATHER_CITY}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=10)
        data = response.json()
        if data.get("cod") != 200:
            return None
        weather = {
            "temp": data["main"]["temp"],
            "humidity": data["main"]["humidity"],
            "wind_speed": data["wind"]["speed"],
            "description": data["weather"][0]["description"].capitalize()
        }
        return weather
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

# === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ===
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    caption = message.caption or ""
    if not user:
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã –Ω–µ –≤ —Å–µ—Å—Å–∏–∏.")
        return

    stage = user.get("stage")
    if stage not in ["order_input", "delivery_confirm"]:
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–∏–µ–º–∫—É.")
        return

    file_id = message.photo[-1].file_id

    if stage == "order_input":
        user.setdefault("order_photos", []).append({"file_id": file_id, "caption": caption})
        if caption:
            user["order_items"].append(caption)
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É!")
    elif stage == "delivery_confirm":
        user.setdefault("delivery_photos", []).append({"file_id": file_id, "caption": caption})
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏.")

# === –û–ë–†–ê–ë–û–¢–ö–ê /START ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "shop": None,
        "order_shop": None,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "choose_shop",
        "date": datetime.now().strftime("%d.%m.%Y"),
        "order_items": [],
        "order_photos": [],
        "order_date": None,
        "pending_delivery": [],
        "accepted_delivery": [],
        "last_order": [],
        "saved_order": []
    }
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())

# === –í–´–ë–û–† –ú–ê–ì–ê–ó–ò–ù–ê ===
@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"])
def choose_shop(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get("stage") == "choose_shop":
        user_data[chat_id] = user or {}
        user_data[chat_id].update({
            "shop": message.text,
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_shop": None,
            "order_items": [],
            "order_photos": [],
            "order_date": None,
            "pending_delivery": [],
            "accepted_delivery": []
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: <b>{message.text}</b>", reply_markup=get_main_menu())
        return

    if user.get("stage") == "choose_shop_order":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            user["order_items"] = []
            user["order_photos"] = []
            user["stage"] = "order_input"
            bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: <b>{message.text}</b>\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:", reply_markup=None)
            return

    if user.get("stage") == "choose_shop_delivery":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            pending = []
            for u in user_data.values():
                if u.get("order_shop") == message.text and u.get("last_order"):
                    pending.extend(u["last_order"])
            pending = list(set(pending))

            if "accepted_delivery" not in user:
                user["accepted_delivery"] = []
            user["pending_delivery"] = [item for item in pending if item not in user["accepted_delivery"]]

            if user["pending_delivery"]:
                items_list = "\n".join(f"‚Ä¢ {item}" for item in user["pending_delivery"])
                bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n{items_list}")
                user["stage"] = "delivery_confirm"
            else:
                bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
                user["stage"] = "main"
            return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu())

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    user = user_data.get(chat_id)

    if not user:
        start(message)
        return

    if text == "üõç –ó–∞–∫–∞–∑":
        if user.get("saved_order"):
            user["order_items"] = user["saved_order"].copy()
            user["stage"] = "order_input"
            order_text = format_order_list(user["order_items"])
            bot.send_message(chat_id,
                             f"üíæ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑:\n{order_text}\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º.",
                             reply_markup=get_order_action_menu())
        else:
            user["stage"] = "choose_shop_order"
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "order_input":
        if text in ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
                    return
                send_order(chat_id)
                user["saved_order"] = []
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
                return

            if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
                    return
                bot.send_message(chat_id,
                                 "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                                 "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å—ë', '–æ—á–∏—Å—Ç–∏—Ç—å', '—Å–±—Ä–æ—Å–∏—Ç—å'.")
                user["stage"] = "order_edit"
                return

            if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
                    return
                user["saved_order"] = user["order_items"].copy()
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª.", reply_markup=get_main_menu())
                return

            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
                return

        else:
            items = sanitize_input(text)
            if items:
                user["order_items"].extend(items)
                order_text = format_order_list(user["order_items"])
                bot.send_message(chat_id, order_text)
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return

    if user["stage"] == "order_edit":
        text_lower = text.lower()
        if any(word in text_lower for word in ["—É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "—É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "–æ—á–∏—Å—Ç–∏—Ç—å", "—Å–±—Ä–æ—Å–∏—Ç—å"]):
            user["order_items"] = []
            bot.send_message(chat_id, "üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω.")
        else:
            to_delete = sanitize_input(text)
            initial_len = len(user["order_items"])
            remaining = []
            for order_item in user["order_items"]:
                if not any(order_item.lower() == del_item.lower() for del_item in to_delete):
                    remaining.append(order_item)
            deleted_count = initial_len - len(remaining)
            user["order_items"] = remaining
            if deleted_count:
                bot.send_message(chat_id, f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {deleted_count}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        order_text = format_order_list(user["order_items"])
        bot.send_message(chat_id, order_text)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        user["stage"] = "order_input"
        return

    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        user["stage"] = "choose_shop_delivery"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "delivery_confirm":
        arrived = sanitize_input(text)

        invalid_items = [item for item in arrived if item not in user.get("pending_delivery", [])]
        if invalid_items:
            bot.send_message(chat_id, f"‚ö†Ô∏è –¢–æ–≤–∞—Ä(—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω(—ã) –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö: {', '.join(invalid_items)}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ.")
            return

        not_arrived = [item for item in user.get("pending_delivery", []) if item not in arrived]

        user.setdefault("accepted_delivery", [])
        for item in arrived:
            if item not in user["accepted_delivery"]:
                user["accepted_delivery"].append(item)

        user["pending_delivery"] = not_arrived

        if arrived:
            bot.send_message(chat_id, f"–û—Ç–º–µ—á–µ–Ω–æ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–º:\n" + "\n".join(f"‚Ä¢ {item}" for item in arrived))
        else:
            bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")

        if not_arrived:
            bot.send_message(chat_id, "–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É.")
        else:
            bot.send_message(chat_id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω—è—Ç—ã.")
            user["accepted_delivery"] = []

        user["stage"] = "main"
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main"})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —É—à–ª–æ?:")
        return

    if user["stage"] == "amount_input":
        try:
            amount = int(text)
            if amount < 0:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        shop = user["shop"]
        mode = user["mode"]
        if mode == "add":
            user["transfers"].append(amount)
        else:
            user["transfers"].append(-amount)
        user["stage"] = "cash_input"
        bot.send_message(chat_id, "–ê —Å–∫–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∫–∏ –≤ –∫–∞—Å—Å–µ —Å–µ–π—á–∞—Å?:")
        return

    if user["stage"] == "cash_input":
        try:
            cash = int(text)
            if cash < 0:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
            user["cash"] = cash
            user["stage"] = "terminal_input"
            bot.send_message(chat_id, "–ê —Å–∫–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É?:")
            return
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

    if user["stage"] == "terminal_input":
        try:
            terminal = int(text)
            if terminal < 0:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
            user["terminal"] = terminal
            user["stage"] = "choose_employee"
            ask_for_employees(chat_id)
            return
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

    if user["stage"] == "confirm_report":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            send_report(chat_id)
            user["stage"] = "main"
            user["transfers"] = []
            user["cash"] = 0
            user["terminal"] = 0
            user["employees"] = []
            bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
            return
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            user["stage"] = "amount_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=None)
            return
        elif text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
            user["stage"] = "date_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=None)
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user["stage"] = "main"
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞.", reply_markup=get_main_menu())
            return
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_confirm_menu())
            return

    if user["stage"] == "date_input":
        try:
            datetime.strptime(text, "%d.%m.%Y")
            user["date"] = text
            user["stage"] = "confirm_report"
            preview_report(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        if not user["transfers"] and user["cash"] == 0 and user["terminal"] == 0:
            bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Å—É–º–º—ã.")
            return
        user["stage"] = "confirm_report"
        preview_report(chat_id)
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}</b> —Ä—É–±.")
        return

    bot.send_message(chat_id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

def preview_report(chat_id):
    user = user_data[chat_id]
    total = sum(user.get("transfers", []))
    cash = user.get("cash", 0)
    terminal = user.get("terminal", 0)
    date = user.get("date", datetime.now().strftime("%d.%m.%Y"))
    employees = user.get("employees", [])

    weather = get_weather()
    if weather:
        weather_text = (f"–ü–æ–≥–æ–¥–∞: {weather['description']}, {weather['temp']}¬∞C, "
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å {weather['humidity']}%, –í–µ—Ç–µ—Ä {weather['wind_speed']} –º/—Å")
    else:
        weather_text = "–ü–æ–≥–æ–¥–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    report_text = (
        f"–û—Ç—á—ë—Ç –∑–∞ {date}\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {user.get('shop')}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥—ã: {total} —Ä—É–±.\n"
        f"–ù–∞–ª–∏—á–Ω—ã–µ: {cash} —Ä—É–±.\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: {terminal} —Ä—É–±.\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {', '.join(employees)}\n"
        f"{weather_text}\n"
        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    bot.send_message(chat_id, report_text, reply_markup=get_confirm_menu())

def send_report(chat_id):
    user = user_data[chat_id]
    total = sum(user.get("transfers", []))
    cash = user.get("cash", 0)
    terminal = user.get("terminal", 0)
    date = user.get("date", datetime.now().strftime("%d.%m.%Y"))
    employees = user.get("employees", [])

    weather = get_weather()
    if weather:
        weather_text = (f"–ü–æ–≥–æ–¥–∞: {weather['description']}, {weather['temp']}¬∞C, "
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å {weather['humidity']}%, –í–µ—Ç–µ—Ä {weather['wind_speed']} –º/—Å")
    else:
        weather_text = "–ü–æ–≥–æ–¥–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    report_text = (
        f"–û—Ç—á—ë—Ç –∑–∞ {date}\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {user.get('shop')}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥—ã: {total} —Ä—É–±.\n"
        f"–ù–∞–ª–∏—á–Ω—ã–µ: {cash} —Ä—É–±.\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: {terminal} —Ä—É–±.\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {', '.join(employees)}\n"
        f"{weather_text}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
    bot.send_message(CHAT_ID_FOR_REPORT, report_text, message_thread_id=THREAD_ID_FOR_REPORT)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    try:
        row = [
            date,
            user.get('shop'),
            total,
            cash,
            terminal,
            ", ".join(employees),
            weather['temp'] if weather else '',
            weather['humidity'] if weather else '',
            weather['wind_speed'] if weather else '',
            weather['description'] if weather else ''
        ]
        sheet.append_row(row)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def send_order(chat_id):
    user = user_data[chat_id]
    shop = user.get("order_shop")
    order_items = user.get("order_items", [])
    order_photos = user.get("order_photos", [])

    if not shop or not order_items:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.")
        return

    order_text = f"üõç –ó–∞–∫–∞–∑ –¥–ª—è {shop}:\n" + "\n".join(f"‚Ä¢ {item}" for item in order_items)
    bot.send_message(CHAT_ID_FOR_REPORT, order_text, message_thread_id=THREAD_ID_FOR_ORDER)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    for photo in order_photos:
        file_id = photo.get("file_id")
        caption = photo.get("caption", "")
        bot.send_photo(CHAT_ID_FOR_REPORT, file_id, caption=caption, message_thread_id=THREAD_ID_FOR_ORDER)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    bot.infinity_polling()
