import os
import json
import logging
from datetime import datetime

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 64
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1


def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup


def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup


def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup


def get_order_action_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    markup.add("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup


def sanitize_input(text):
    return [item.strip() for item in text.split(',') if item.strip()]


def format_order_list(items):
    if not items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    return "üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)


def ensure_user(chat_id):
    if chat_id not in user_data:
        user_data[chat_id] = {
            "shop": None,
            "order_shop": None,
            "orders_by_shop": {"–Ø–Ω—Ç–∞—Ä—å": [], "–•–∞–π–ø": [], "–ü–æ–ª–∫–∞": []},
            "pending_delivery": {"–Ø–Ω—Ç–∞—Ä—å": [], "–•–∞–π–ø": [], "–ü–æ–ª–∫–∞": []},
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_items": [],
            "order_photos": [],
            "order_date": None,
            "last_order": [],
            "saved_order": []
        }
    return user_data[chat_id]


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get("stage") != "order_input":
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑.")
        return
    file_id = message.photo[-1].file_id
    user.setdefault("order_photos", []).append(file_id)
    bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–∫–∞–∑—É!")


@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    user = ensure_user(chat_id)

    if text == "/start":
        user_data[chat_id].update({
            "shop": None,
            "order_shop": None,
            "orders_by_shop": {"–Ø–Ω—Ç–∞—Ä—å": [], "–•–∞–π–ø": [], "–ü–æ–ª–∫–∞": []},
            "pending_delivery": {"–Ø–Ω—Ç–∞—Ä—å": [], "–•–∞–π–ø": [], "–ü–æ–ª–∫–∞": []},
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_items": [],
            "order_photos": [],
            "order_date": None,
            "last_order": [],
            "saved_order": []
        })
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())
        return

    # –ì–ª–∞–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if user["stage"] == "main" and text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]:
        user.update({
            "shop": text,
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "date": datetime.now().strftime("%d.%m.%Y"),
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{text}</b>", reply_markup=get_main_menu())
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main", "order_shop": None, "order_items": [], "order_photos": []})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É:")
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        count = len(user["transfers"])
        bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}‚ÇΩ</b>\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        if not user["transfers"]:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã.")
            return
        user["stage"] = "cash_input"
        total = sum(user["transfers"])
        bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{total}‚ÇΩ</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
        return

    if text.isdigit():
        amount = int(text)
        if user["stage"] in ["amount_input", "main"]:
            user["transfers"].append(-amount if user["mode"] == "subtract" else amount)
            bot.send_message(chat_id, f"{'‚ûñ –í–æ–∑–≤—Ä–∞—Ç' if user['mode']=='subtract' else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'}: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            user["mode"] = "add"
            user["stage"] = "main"
            return
        elif user["stage"] == "cash_input":
            user["cash"] = amount
            user["stage"] = "terminal_input"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
            return
        elif user["stage"] == "terminal_input":
            user["terminal"] = amount
            user["stage"] = "confirm_report"
            preview_report(chat_id)
            return

    if user["stage"] == "confirm_report":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
            send_report(chat_id)
            user["stage"] = "main"
            user["transfers"] = []
            user["cash"] = 0
            user["terminal"] = 0
            bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
            return
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            user["stage"] = "cash_input"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã—Ö?:")
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user["stage"] = "main"
            bot.send_message(chat_id, "‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞.", reply_markup=get_main_menu())
            return
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_confirm_menu())
            return

    # --- –ó–∞–∫–∞–∑—ã ---
    if text == "üõç –ó–∞–∫–∞–∑":
        user["stage"] = "choose_shop"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "choose_shop":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if text in allowed_shops:
            user["order_shop"] = text
            current_order = user["orders_by_shop"].get(text, [])
            user["order_items"] = current_order.copy()
            user["order_photos"] = []
            user["stage"] = "order_input"
            order_text = format_order_list(user["order_items"])
            bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: <b>{text}</b>\n{order_text}\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=get_order_action_menu())
            return
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user["stage"] = "main"
            bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
            return
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.", reply_markup=get_shop_menu())
            return

    if user["stage"] == "order_input":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
            if not user["order_items"]:
                bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
                return
            send_order(chat_id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ orders_by_shop
            user["orders_by_shop"][user["order_shop"]] = user["order_items"].copy()
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ pending_delivery (–¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–æ—Å—Ç–∞–≤–∫–∏)
            pending = user["pending_delivery"].get(user["order_shop"], [])
            for item in user["order_items"]:
                if item not in pending:
                    pending.append(item)
            user["pending_delivery"][user["order_shop"]] = pending

            user["last_order"] = user["order_items"].copy()
            user["order_items"] = []
            user["order_photos"] = []
            user["order_shop"] = None
            user["stage"] = "main"
            bot.send_message(chat_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
            return

        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
            if not user["order_items"]:
                bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
                return
            bot.send_message(chat_id,
                             "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
                             "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å—ë'.")
            user["stage"] = "order_edit"
            return

        elif text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)":
            if not user["order_items"]:
                bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
                return
            user["saved_order"] = user["order_items"].copy()
            user["stage"] = "main"
            bot.send_message(chat_id, "üíæ –•–æ—Ä–æ—à–æ, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –∑–∞–∫–∞–∑. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ –∏ –¥–æ–ø–∏—Å–∞—Ç—å.\n–ß—Ç–æ–±—ã –∑–∞—è–≤–∫–∞ —É—à–ª–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª.", reply_markup=get_main_menu())
            return

        else:
            items = sanitize_input(text)
            if items:
                user["order_items"].extend(items)
                order_text = format_order_list(user["order_items"])
                bot.send_message(chat_id, order_text)
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return

    if text == "‚ùå –û—Ç–º–µ–Ω–∞" and user["stage"] in ["order_input", "order_edit"]:
        user["order_items"] = []
        user["order_shop"] = None
        user["order_photos"] = []
        user["stage"] = "main"
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        return

    if user["stage"] == "order_edit":
        if text.lower() == "—É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
            user["order_items"] = []
            bot.send_message(chat_id, "üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω.")
        else:
            to_delete = sanitize_input(text)
            initial_len = len(user["order_items"])
            user["order_items"] = [item for item in user["order_items"] if item not in to_delete]
            deleted_count = initial_len - len(user["order_items"])
            if deleted_count:
                bot.send_message(chat_id, f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {deleted_count}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        order_text = format_order_list(user["order_items"])
        bot.send_message(chat_id, order_text)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        user["stage"] = "order_input"
        return

    # --- –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ ---
    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        shops_with_pending = [shop for shop, items in user["pending_delivery"].items() if items]
        if not shops_with_pending:
            bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É.")
            return
        user["stage"] = "delivery_choose_shop"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for shop in shops_with_pending:
            markup.add(shop)
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É:", reply_markup=markup)
        return

    if user["stage"] == "delivery_choose_shop":
        if text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]:
            pending_items = user["pending_delivery"].get(text, [])
            if not pending_items:
                bot.send_message(chat_id, f"–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {text}.")
                user["stage"] = "main"
                bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
                return
            user["order_shop"] = text
            user["stage"] = "delivery_confirm"
            bot.send_message(chat_id,
                             f"–¢–æ–≤–∞—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è <b>{text}</b>:\n" +
                             "\n".join(f"‚Ä¢ {item}" for item in pending_items) +
                             "\n\n–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–µ—Ö–∞–ª–∏ (–∏–ª–∏ '–≤—Å–µ', –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–µ—Ö–∞–ª–∏).",
                             reply_markup=None)
            return
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user["stage"] = "main"
            bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
            return
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.", reply_markup=get_shop_menu())
            return

    if user["stage"] == "delivery_confirm":
        pending_items = user["pending_delivery"].get(user["order_shop"], [])
        if not pending_items:
            bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
            user["stage"] = "main"
            return

        if text.lower() == "–≤—Å–µ":
            # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ ‚Äî –æ—á–∏—â–∞–µ–º pending_delivery –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            user["pending_delivery"][user["order_shop"]] = []
            bot.send_message(chat_id, f"–í—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ <b>{user['order_shop']}</b> –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–µ.")
        else:
            arrived = sanitize_input(text)
            # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ pending_delivery —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ù–ï –ø—Ä–∏–µ—Ö–∞–ª–∏
            new_pending = [item for item in pending_items if item not in arrived]
            user["pending_delivery"][user["order_shop"]] = new_pending
            bot.send_message(chat_id,
                             f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–µ: {len(arrived)}\n"
                             f"–û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö: {len(new_pending)}")
        user["stage"] = "main"
        user["order_shop"] = None
        bot.send_message(chat_id, "–ü–æ—Å—Ç–∞–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
    bot.send_message(chat_id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())


def round_to_50(value):
    remainder = value % 50
    return int(value - remainder) if remainder < 25 else int(value + (50 - remainder))


def preview_report(chat_id):
    data = user_data[chat_id]
    transfers = sum(data["transfers"])
    total = transfers + data["cash"] + data["terminal"]
    if data["shop"] == "–Ø–Ω—Ç–∞—Ä—å":
        total = round_to_50(total)
    msg = (
        f"–û—Ç—á—ë—Ç –ø–æ –º–∞–≥–∞–∑–∏–Ω—É <b>{data['shop']}</b> –∑–∞ <b>{data['date']}</b>:\n"
        f"–ü–µ—Ä–µ–≤–æ–¥—ã: <b>{transfers}‚ÇΩ</b>\n"
        f"–ù–∞–ª–∏—á–Ω—ã–µ: <b>{data['cash']}‚ÇΩ</b>\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: <b>{data['terminal']}‚ÇΩ</b>\n"
        f"–ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
    )
    bot.send_message(chat_id, msg, reply_markup=get_confirm_menu())


def send_report(chat_id):
    data = user_data[chat_id]
    transfers = sum(data["transfers"])
    total = transfers + data["cash"] + data["terminal"]
    if data["shop"] == "–Ø–Ω—Ç–∞—Ä—å":
        total = round_to_50(total)
    text = (
        f"–û—Ç—á—ë—Ç –ø–æ –º–∞–≥–∞–∑–∏–Ω—É <b>{data['shop']}</b> –∑–∞ <b>{data['date']}</b>:\n"
        f"–ü–µ—Ä–µ–≤–æ–¥—ã: <b>{transfers}‚ÇΩ</b>\n"
        f"–ù–∞–ª–∏—á–Ω—ã–µ: <b>{data['cash']}‚ÇΩ</b>\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: <b>{data['terminal']}‚ÇΩ</b>\n"
        f"–ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ—Ç—á–µ—Ç–æ–≤ –≤ –Ω—É–∂–Ω—ã–π —Ç–æ–ø–∏–∫
    bot.send_message(CHAT_ID_FOR_REPORT, text, message_thread_id=THREAD_ID_FOR_REPORT)


def send_order(chat_id):
    data = user_data[chat_id]
    shop = data["order_shop"]
    items = data["order_items"]
    photos = data.get("order_photos", [])
    if not shop or not items:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.")
        return
    text = f"üõí <b>–ó–∞–∫–∞–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É {shop}</b>:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–æ–ø–∏–∫ 64
    bot.send_message(CHAT_ID_FOR_REPORT, text, message_thread_id=THREAD_ID_FOR_ORDER)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    for photo_id in photos:
        bot.send_photo(CHAT_ID_FOR_REPORT, photo_id, message_thread_id=THREAD_ID_FOR_ORDER)


if __name__ == '__main__':
    print("Bot started...")
    bot.infinity_polling()
