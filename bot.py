import os
import json
import logging
from datetime import datetime
import threading
import schedule
import time

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenWeather

# === –ó–ê–ì–†–£–ó–ö–ê .ENV ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 64
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ì–û–î–´ ===
OPENWEATHER_API_KEY = "0657e04209d46b14a466de79282d9ca7"
OPENWEATHER_CITY = "Gelendzhik"  # –ì–æ—Ä–æ–¥ –≤—Å–µ–≥–¥–∞ –ì–µ–ª–µ–Ω–¥–∂–∏–∫!
WEATHER_LOG_FILE = "weather_log.json"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

# === –ì–õ–û–ë–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú ===
shop_data = {
    "–Ø–Ω—Ç–∞—Ä—å": {
        "last_order": [],
        "pending_delivery": [],
        "accepted_delivery": []
    },
    "–•–∞–π–ø": {
        "last_order": [],
        "pending_delivery": [],
        "accepted_delivery": []
    },
    "–ü–æ–ª–∫–∞": {
        "last_order": [],
        "pending_delivery": [],
        "accepted_delivery": []
    }
}

# === –•–†–ê–ù–ò–õ–ò–©–ï MESSAGE_ID –ó–ê–ö–ê–ó–û–í –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú ===
shop_order_messages = {}  # {shop_name: {"message_id": int, "photos": [], "videos": []}}

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ü–£–õ–Ø–†–ù–´–• –¢–û–í–ê–†–û–í ===
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ {item_name: [timestamps]}
item_statistics = {}

# === –°–ü–ò–°–û–ö –°–û–¢–†–£–î–ù–ò–ö–û–í ===
STAFF_LIST = ["–î–∞–Ω–∏–ª", "–î–∞–Ω–∏–∑", "–î–∞—à–∞", "–°–æ–Ω—è", "–û–∫—Å–∞–Ω–∞", "–õ–∏–∑–∞"]

# === –°–ü–ò–°–û–ö –ü–†–û–î–ê–í–¶–û–í ===
SELLER_LIST = ["–î–∞–Ω–∏–ª", "–î–∞–Ω–∏–∑", "–î–∞—à–∞", "–°–æ–Ω—è", "–û–∫—Å–∞–Ω–∞", "–õ–∏–∑–∞"]

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–û–ì–û–î–´ ===
def get_weather_raw():
    url = f"http://api.openweathermap.org/data/2.5/weather?q={OPENWEATHER_CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            weather_main = data["weather"][0]["main"].lower()
            weather_desc = data["weather"][0]["description"]
            wind_speed = data["wind"]["speed"]
            rain = 0
            if "rain" in data and "1h" in data["rain"]:
                rain = data["rain"]["1h"]
            return {
                "timestamp": datetime.now().isoformat(),
                "temp": temp,
                "weather": weather_main,
                "weather_desc": weather_desc,
                "rain": rain,
                "wind": wind_speed
            }
        else:
            logging.warning(f"OpenWeather error: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

def log_weather():
    now = datetime.now()
    if 9 <= now.hour < 23:
        weather = get_weather_raw()
        if weather:
            try:
                if os.path.exists(WEATHER_LOG_FILE):
                    with open(WEATHER_LOG_FILE, "r") as f:
                        weather_log = json.load(f)
                else:
                    weather_log = []
                weather_log.append(weather)
                with open(WEATHER_LOG_FILE, "w") as f:
                    json.dump(weather_log, f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")

def weather_monitor_thread():
    schedule.every(10).minutes.do(log_weather)
    while True:
        schedule.run_pending()
        time.sleep(5)

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
weather_thread = threading.Thread(target=weather_monitor_thread, daemon=True)
weather_thread.start()

def get_weather_condition_emoji(weather_main, weather_desc):
    """Get weather emoji based on weather condition"""
    weather_main_lower = weather_main.lower()
    weather_desc_lower = weather_desc.lower()
    
    if "rain" in weather_main_lower or "–¥–æ–∂–¥—å" in weather_desc_lower:
        return "üåßÔ∏è –î–æ–∂–¥—å"
    elif "cloud" in weather_main_lower or "–æ–±–ª–∞—á" in weather_desc_lower or "–ø–∞—Å–º—É—Ä–Ω" in weather_desc_lower:
        return "üå•Ô∏è –ü–∞—Å–º—É—Ä–Ω–æ"
    elif "clear" in weather_main_lower or "—è—Å–Ω" in weather_desc_lower:
        return "‚òÄÔ∏è –Ø—Å–Ω–æ"
    elif "snow" in weather_main_lower or "—Å–Ω–µ–≥" in weather_desc_lower:
        return "‚ùÑÔ∏è –°–Ω–µ–≥"
    elif "fog" in weather_main_lower or "mist" in weather_main_lower or "—Ç—É–º–∞–Ω" in weather_desc_lower:
        return "üå´Ô∏è –¢—É–º–∞–Ω"
    else:
        return f"üå§Ô∏è {weather_desc.capitalize()}"

def get_weather_report():
    if not os.path.exists(WEATHER_LOG_FILE):
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–æ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    with open(WEATHER_LOG_FILE, "r") as f:
        weather_log = json.load(f)
    today = datetime.now().date()
    today_log = [entry for entry in weather_log if datetime.fromisoformat(entry["timestamp"]).date() == today]
    if not today_log:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–æ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    temps = [entry["temp"] for entry in today_log]
    wind_speeds = [entry["wind"] for entry in today_log]
    rain_periods = [entry for entry in today_log if entry["rain"] > 0]
    rain_total = sum(entry["rain"] for entry in rain_periods)
    rain_hours = len(rain_periods) * 10 / 60
    # –í–º–µ—Å—Ç–æ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (–ø–∏–∫–æ–≤–∞—è)
    max_temp = round(max(temps), 1)
    avg_wind = round(sum(wind_speeds) / len(wind_speeds), 1)
    
    # Get weather condition with emoji from the latest entry
    latest_entry = today_log[-1]
    weather_condition = get_weather_condition_emoji(latest_entry["weather"], latest_entry["weather_desc"])
    
    report = (
        f"<b>–ü–æ–≥–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"{weather_condition}\n"
        f"–ü–∏–∫–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{max_temp}¬∞C</b>\n"
    )
    
    # Only show rain information if there was rain
    if rain_total > 0:
        rain_was = "–¥–∞"
        report += (
            f"–î–æ–∂–¥—å –±—ã–ª: <b>{rain_was}</b>\n"
            f"–î–æ–∂–¥—å (–≤—Ä–µ–º—è): <b>{rain_hours:.2f} —á</b>, –≤—Å–µ–≥–æ –≤—ã–ø–∞–ª–æ <b>{rain_total:.2f} –º–º</b>\n"
        )
    
    report += f"–°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä: <b>{avg_wind} –º/—Å</b>"
    return report

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup

def get_shop_menu(include_back=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    if include_back:
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_order_action_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞")
    markup.add("‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_delivery_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_staff_keyboard(selected_staff=None):
    selected_staff = selected_staff or []
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for staff in STAFF_LIST:
        text = f"‚úÖ {staff}" if staff in selected_staff else staff
        callback_data = f"staff_{staff}"
        buttons.append(types.InlineKeyboardButton(text, callback_data=callback_data))
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="staff_done"))
    return markup

def get_seller_keyboard(selected_sellers=None):
    selected_sellers = selected_sellers or []
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for seller in SELLER_LIST:
        text = f"‚úÖ {seller}" if seller in selected_sellers else seller
        callback_data = f"seller_{seller}"
        buttons.append(types.InlineKeyboardButton(text, callback_data=callback_data))
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="sellers_done"))
    return markup

def get_delivery_keyboard(pending_items, arrived_items=None):
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–∏—ë–º–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    arrived_items = arrived_items or []
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for item in pending_items:
        status = "‚úÖ" if item in arrived_items else "‚ùå"
        text = f"{status} {item}"
        callback_data = f"delivery_toggle_{pending_items.index(item)}"
        markup.add(types.InlineKeyboardButton(text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton("üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º–∫—É", callback_data="delivery_submit"))
    return markup

def get_order_removal_keyboard(order_items, selected_for_removal=None):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∑–∞–∫–∞–∑–∞"""
    selected_for_removal = selected_for_removal or []
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for i, item in enumerate(order_items):
        status = "üóë" if item in selected_for_removal else "üì¶"
        text = f"{status} {item}"
        callback_data = f"remove_toggle_{i}"
        markup.add(types.InlineKeyboardButton(text, callback_data=callback_data))
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_row = []
    control_row.append(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="remove_accept"))
    control_row.append(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="remove_all"))
    markup.add(*control_row)
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="remove_back"))
    
    return markup

def sanitize_input(text):
    items = []
    for part in text.split(','):
        items.extend([x.strip() for x in part.split('\n') if x.strip()])
    return items

def deduplicate_order_items(items):
    """Remove duplicates from order items while preserving order"""
    seen = set()
    unique_items = []
    for item in items:
        item_lower = item.lower().strip()
        if item_lower not in seen:
            seen.add(item_lower)
            unique_items.append(item)
    return unique_items

def is_photo_related_item(item):
    """Check if item contains photo-related keywords that should not go to delivery"""
    item_lower = item.lower().strip()
    photo_keywords = ["—Ñ–æ—Ç–æ", "–ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–æ—Ç–æ", "–≤–∏–¥–µ–æ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–Ω–∏–º–æ–∫"]
    return any(keyword in item_lower for keyword in photo_keywords)

def filter_photo_items(items):
    """Filter out photo-related items from list"""
    return [item for item in items if not is_photo_related_item(item)]

def merge_order(chat_id, new_items):
    """Merge new items with current session order items"""
    user = user_data.get(chat_id)
    if not user:
        return new_items
    
    previous_order = user.get("order_items", [])
    
    if not previous_order:
        # No previous order in session, just return new items
        return new_items
    
    # Combine current session order with new items
    combined_items = previous_order + new_items
    # Remove duplicates while preserving order
    combined_items = deduplicate_order_items(combined_items)
    
    # Send informative message to user
    previous_order_text = ", ".join(previous_order)
    new_items_text = ", ".join(new_items)
    combined_text = ", ".join(combined_items)
    
    merge_message = (
        f"üì¶ <b>–£ —Ç–µ–±—è –±—ã–ª –∑–∞–∫–∞–∑:</b> {previous_order_text}\n"
        f"‚ûï <b>–î–æ–±–∞–≤–ª—è—é –∫ —Ç–≤–æ–µ–º—É –∑–∞–∫–∞–∑—É:</b> {new_items_text}\n"
        f"üîÑ <b>–í–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑:</b> {combined_text}"
    )
    
    bot.send_message(chat_id, merge_message)
    
    return combined_items

def format_order_list(items, arrived=None, show_appended_info=False, original_count=0):
    if not items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    
    result = "üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n"
    if show_appended_info and original_count > 0:
        result += f"üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {original_count}\n"
        result += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ-–∑–∞–∫–∞–∑–æ–º: {len(items) - original_count}\n"
        result += f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(items)}\n\n"
    
    for i, item in enumerate(items):
        if arrived is not None:
            if item in arrived:
                result += f"‚úÖ {item}\n"
            else:
                result += f"‚ùå {item}\n"
        else:
            # Show which items are original vs appended
            if show_appended_info and original_count > 0:
                if i < original_count:
                    result += f"üì¶ {item}\n"
                else:
                    result += f"‚ûï {item}\n"
            else:
                result += f"‚Ä¢ {item}\n"
    return result

def format_order_with_attention(all_order_items, carried_items):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.
    
    Args:
        all_order_items: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
        carried_items: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞
    
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    """
    if not all_order_items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
    carried_set = set(carried_items) if carried_items else set()
    
    carried_order_items = []
    new_order_items = []
    
    for item in all_order_items:
        if item in carried_set:
            carried_order_items.append(item)
        else:
            new_order_items.append(item)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    carried_order_items.sort()
    new_order_items.sort()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = "üì¶ –ó–∞–∫–∞–∑:\n"
    counter = 1
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∫—Ä–∞—Å–Ω—ã–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Å–º–∞–π–ª–∏–∫–æ–º
    for item in carried_order_items:
        result += f"{counter}. üî¥‚ùó {item}\n"
        counter += 1
    
    # –ó–∞—Ç–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–±—ã—á–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π
    for item in new_order_items:
        result += f"{counter}. {item}\n"
        counter += 1
    
    return result

def round_to_50(value):
    remainder = value % 50
    if remainder < 25:
        return int(value - remainder)
    else:
        return int(value + (50 - remainder))

def track_order_item(item):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    current_time = datetime.now().isoformat()
    item_clean = item.strip().lower()
    if item_clean not in item_statistics:
        item_statistics[item_clean] = []
    item_statistics[item_clean].append(current_time)

def get_popular_items(limit=15):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"""
    from datetime import timedelta
    
    week_ago = datetime.now() - timedelta(days=7)
    popular_items = {}
    
    for item, timestamps in item_statistics.items():
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        recent_orders = [
            t for t in timestamps 
            if datetime.fromisoformat(t) >= week_ago
        ]
        if recent_orders:
            popular_items[item] = len(recent_orders)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-15
    sorted_items = sorted(popular_items.items(), key=lambda x: x[1], reverse=True)
    return [item[0] for item in sorted_items[:limit]]

def get_popular_items_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    popular_items = get_popular_items()
    if not popular_items:
        return None
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    
    for i, item in enumerate(popular_items):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        button_text = item[:25] + "..." if len(item) > 25 else item
        callback_data = f"popular_{i}"
        buttons.append(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])
    
    markup.add(types.InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="popular_skip"))
    return markup, popular_items

@bot.message_handler(content_types=['photo', 'video'])
def handle_media(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    caption = message.caption or ""
    if not user:
        bot.send_message(chat_id, "üì∑/üé¨ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã –Ω–µ –≤ —Å–µ—Å—Å–∏–∏.")
        return

    stage = user.get("stage")
    if stage not in ["order_input", "delivery_confirm"]:
        bot.send_message(chat_id, "üì∑/üé¨ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑/–ø—Ä–∏–µ–º–∫—É/–¥–æ-–∑–∞–∫–∞–∑.")
        return

    # Prevent media from being added during delivery confirmation
    if stage == "delivery_confirm":
        bot.send_message(chat_id, "‚ö†Ô∏è –ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏.")
        return

    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        # Add clarification note to caption
        clarification_caption = f"–§–æ—Ç–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –≤ –ø—Ä–∏—ë–º–∫–µ. {caption}".strip()
        user.setdefault("order_photos", []).append({"file_id": file_id, "caption": clarification_caption})
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–µ—Ç–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è!")
    elif message.content_type == 'video':
        file_id = message.video.file_id
        # Add clarification note to caption
        clarification_caption = f"–í–∏–¥–µ–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –≤ –ø—Ä–∏—ë–º–∫–µ. {caption}".strip()
        user.setdefault("order_videos", []).append({"file_id": file_id, "caption": clarification_caption})
        bot.send_message(chat_id, "üé¨ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–µ—Ç–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è!")

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        # === –¢–û–õ–¨–ö–û UI –°–û–°–¢–û–Ø–ù–ò–ï –ò –í–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –°–ï–°–°–ò–ò ===
        "shop": None,  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        "order_shop": None,  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏)
        "transfers": [],  # –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
        "mode": "add",  # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–≤—ã—á–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        "cash": 0,  # –ù–∞–ª–∏—á–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        "terminal": 0,  # –¢–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–∞
        "stage": "choose_shop",  # –°—Ç–∞–¥–∏—è –¥–∏–∞–ª–æ–≥–∞
        "date": datetime.now().strftime("%d.%m.%Y"),  # –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
        "order_items": [],  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∑–∞–∫–∞–∑–∞
        "order_photos": [],  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∑–∞–∫–∞–∑–∞
        "order_videos": [],  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∑–∞–∫–∞–∑–∞
        "delivery_arrived": [],  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–±—ã–≤—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ
        "delivery_message_id": None,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏—ë–º–∫–∏
        "selected_staff": [],  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        "selected_sellers": [],  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
        "order_is_appended": False,  # –§–ª–∞–≥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π)
        "original_order_count": 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        "saved_order": [],  # –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "selected_for_removal": [],  # –ü–æ–∑–∏—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        "popular_items_list": [],  # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        "temp_shop": None  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    }
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())

@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def choose_shop(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user["stage"] = "main"
        bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    if not user or user.get("stage") == "choose_shop":
        user_data[chat_id] = user or {}
        user_data[chat_id].update({
            "shop": message.text,
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_shop": None,
            "order_items": [],
            "order_photos": [],
            "order_videos": [],
            "delivery_arrived": [],
            "delivery_message_id": None,
            "selected_staff": [],
            "selected_sellers": [],
            "order_is_appended": False,
            "original_order_count": 0,
            "saved_order": [],
            "selected_for_removal": [],
            "popular_items_list": [],
            "temp_shop": None
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: <b>{message.text}</b>", reply_markup=get_main_menu())
        return

    if user.get("stage") == "choose_shop_order":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            shop = message.text
            
            # Clear any previous order session state to avoid conflicts
            user["order_photos"] = []
            user["order_videos"] = []
            user["delivery_arrived"] = []
            user["delivery_message_id"] = None
            
            # Step 1: Start with pending delivery items (leftovers from previous deliveries)
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ú–ê–ì–ê–ó–ò–ù–ê, –ù–û –ò–°–ö–õ–Æ–ß–ê–ï–ú –§–û–¢–û-–ü–û–ó–ò–¶–ò–ò
            shop_info = shop_data[shop]
            all_leftovers = shop_info["pending_delivery"].copy()
            # Filter out photo-related items from leftovers as they shouldn't be in pending_delivery anyway
            leftovers = filter_photo_items(all_leftovers) if all_leftovers else []
            combined_items = leftovers.copy() if leftovers else []
            
            # Step 2: Check if there's an existing last_order for this shop and merge it
            # BUT exclude items that have already been accepted
            existing_order_items = shop_info["last_order"].copy()
            accepted_items = shop_info["accepted_delivery"]
            
            # Filter out already accepted items from existing order
            filtered_existing_items = [item for item in existing_order_items if item not in accepted_items]
            
            if filtered_existing_items:
                combined_items.extend(filtered_existing_items)
                existing_order_combined = True
            
            # Step 3: Remove duplicates from combined items
            combined_items = deduplicate_order_items(combined_items)
            total_combined = len(combined_items)
            
            # Step 5: Set up order state
            user["order_items"] = combined_items
            user["order_is_appended"] = len(combined_items) > 0
            user["original_order_count"] = len(combined_items)
            user["stage"] = "order_input"
            
            # Step 6: Create one consolidated message with all information
            consolidated_msg = f"üõí –í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: ¬´{shop}¬ª\n"
            
            # Step 6: Add order information if there are existing items
            if leftovers or filtered_existing_items:
                consolidated_msg += "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                consolidated_msg += "–° –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
                
                # List all carried over items as bullet points
                for item in combined_items:
                    consolidated_msg += f"- {item}\n"
                
                consolidated_msg += "\n"
            
            # Add information guide
            consolidated_msg += (
                "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞:\n"
                "‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)\n"
                "‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞\n"
                "‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ù–ï –ø–æ–ø–∞–¥—É—Ç –≤ –ø—Ä–∏—ë–º–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏"
            )
            
            # Send the consolidated message
            bot.send_message(chat_id, consolidated_msg, reply_markup=get_order_action_menu())
            return

    if user.get("stage") == "choose_shop_order_with_saved":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            shop = message.text
            
            # Clear any previous order session state to avoid conflicts
            user["order_photos"] = []
            user["order_videos"] = []
            user["delivery_arrived"] = []
            user["delivery_message_id"] = None
            
            # Step 1: Start with saved order items
            saved_items = user.get("saved_order", [])
            combined_items = saved_items.copy() if saved_items else []
            
            # Step 2: Add pending delivery items for this shop
            shop_info = shop_data[shop]
            all_leftovers = shop_info["pending_delivery"].copy()
            leftovers = filter_photo_items(all_leftovers) if all_leftovers else []
            if leftovers:
                combined_items.extend(leftovers)
            
            # Step 3: Add last order items (excluding already accepted)
            existing_order_items = shop_info["last_order"].copy()
            accepted_items = shop_info["accepted_delivery"]
            filtered_existing_items = [item for item in existing_order_items if item not in accepted_items]
            if filtered_existing_items:
                combined_items.extend(filtered_existing_items)
            
            # Step 4: Remove duplicates from combined items
            combined_items = deduplicate_order_items(combined_items)
            
            # Step 5: Set up order state
            user["order_items"] = combined_items
            user["order_is_appended"] = len(combined_items) > len(saved_items)
            user["original_order_count"] = len(combined_items)
            
            # Step 5: Set up order state
            user["order_items"] = combined_items
            user["order_is_appended"] = len(combined_items) > len(saved_items)
            user["original_order_count"] = len(combined_items)
            user["stage"] = "order_input"
            
            # Step 6: Create consolidated message
            consolidated_msg = f"üõí –í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: ¬´{shop}¬ª\n"
            
            if saved_items:
                consolidated_msg += f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {len(saved_items)} –ø–æ–∑–∏—Ü–∏–π\n"
            
            if leftovers or filtered_existing_items:
                auto_added = len(combined_items) - len(saved_items)
                if auto_added > 0:
                    consolidated_msg += f"‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∏–µ—Ö–∞–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {auto_added}\n"
                consolidated_msg += "\n–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ:\n"
                for item in combined_items:
                    consolidated_msg += f"- {item}\n"
                consolidated_msg += "\n"
            
            # Add information guide
            consolidated_msg += (
                "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞:\n"
                "‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)\n"
                "‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞\n"
                "‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ù–ï –ø–æ–ø–∞–¥—É—Ç –≤ –ø—Ä–∏—ë–º–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏"
            )
            
            # Clear saved order since it's now loaded
            user["saved_order"] = []
            
            # Send the consolidated message
            bot.send_message(chat_id, consolidated_msg, reply_markup=get_order_action_menu())
            return

    if user.get("stage") == "choose_shop_delivery":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            shop = message.text
            
            # Clear any previous delivery session state
            user["delivery_arrived"] = []
            user["delivery_message_id"] = None
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ú–ê–ì–ê–ó–ò–ù–ê –î–õ–Ø –ü–†–ò–ï–ú–ö–ò
            shop_info = shop_data[shop]
            pending_items = shop_info["pending_delivery"].copy()
            
            if pending_items:
                # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
                user["stage"] = "delivery_buttons"
                
                items_text = f"üì¶ <b>–ü—Ä–∏—ë–º–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop}</b>\n\n"
                items_text += "–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–µ—Ö–∞–ª–∏, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏:\n"
                items_text += "‚úÖ = –ø—Ä–∏–µ—Ö–∞–ª–æ, ‚ùå = –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–æ\n\n"
                
                delivery_msg = bot.send_message(
                    chat_id, 
                    items_text, 
                    reply_markup=get_delivery_keyboard(pending_items, user["delivery_arrived"])
                )
                user["delivery_message_id"] = delivery_msg.message_id
            else:
                bot.send_message(chat_id, f"üì¶ <b>–ú–∞–≥–∞–∑–∏–Ω {shop} –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø—Ä–∏—ë–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏.</b>\n\n–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.", reply_markup=get_main_menu())
                user["stage"] = "main"
            return

    # Handle invalid shop selection based on current stage
    current_stage = user.get("stage")
    if current_stage == "choose_shop_order":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu(include_back=True))
    elif current_stage == "choose_shop_order_with_saved":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu(include_back=True))
    elif current_stage == "choose_shop_delivery":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu(include_back=True))
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('popular_'))
def handle_popular_items_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    current_stage = user.get('stage') if user else None
    
    if not user or current_stage not in ['popular_items', 'popular_after_order']:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    if call.data == 'popular_skip':
        if current_stage == 'popular_after_order':
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user['stage'] = 'main'
            user['temp_shop'] = None
            bot.edit_message_text(
                "‚û°Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                chat_id, 
                call.message.message_id
            )
            bot.answer_callback_query(call.id)
            return
        else:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è popular_items
            user['stage'] = 'order_input'
            bot.edit_message_text(
                "‚û°Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π:",
                chat_id, 
                call.message.message_id
            )
            bot.send_message(chat_id, 
                "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞:\n"
                "‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)\n"
                "‚Ä¢ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞\n"
                "‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ù–ï –ø–æ–ø–∞–¥—É—Ç –≤ –ø—Ä–∏—ë–º–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏",
                reply_markup=get_order_action_menu()
            )
            bot.answer_callback_query(call.id)
            return
    
    if call.data.startswith('popular_'):
        try:
            item_index = int(call.data.replace('popular_', ''))
            popular_items = user.get('popular_items_list', [])
            
            if 0 <= item_index < len(popular_items):
                selected_item = popular_items[item_index]
                
                if current_stage == 'popular_after_order':
                    # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                    user.setdefault('order_items', []).append(selected_item)
                    user['order_shop'] = user.get('temp_shop')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
                    user['stage'] = 'order_input'
                    user['temp_shop'] = None  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
                    
                    bot.answer_callback_query(call.id, f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Ç–æ–≤–∞—Ä–æ–º: {selected_item}")
                    
                    order_text = format_order_list(user['order_items'])
                    bot.edit_message_text(
                        f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ¬´{user['order_shop']}¬ª!\n\n"
                        f"{order_text}\n\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–∞–∑:",
                        chat_id,
                        call.message.message_id
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º
                    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
                    return
                    
                else:
                    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
                    if selected_item not in user.get('order_items', []):
                        user.setdefault('order_items', []).append(selected_item)
                        
                        bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {selected_item}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                        order_text = format_order_list(user['order_items'])
                        bot.edit_message_text(
                            f"‚úÖ –¢–æ–≤–∞—Ä ¬´{selected_item}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!\n\n{order_text}\n\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∑–∞–∫–∞–∑–æ–º:",
                            chat_id,
                            call.message.message_id,
                            reply_markup=call.message.reply_markup
                        )
                    else:
                        bot.answer_callback_query(call.id, f"‚ö†Ô∏è {selected_item} —É–∂–µ –≤ –∑–∞–∫–∞–∑–µ")
                    
        except (ValueError, IndexError):
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_'))
def handle_order_removal_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'order_removal':
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    order_items = user.get('order_items', [])
    selected_for_removal = user.get('selected_for_removal', [])

    if call.data == 'remove_accept':
        # –ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        remaining_items = [item for item in order_items if item not in selected_for_removal]
        user['order_items'] = remaining_items
        user['selected_for_removal'] = []
        user['stage'] = 'order_input'
        
        removed_count = len(order_items) - len(remaining_items)
        if removed_count > 0:
            success_msg = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {removed_count}\n\n"
        else:
            success_msg = "‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.\n\n"
            
        order_text = format_order_list(remaining_items)
        bot.edit_message_text(
            success_msg + order_text,
            chat_id,
            call.message.message_id
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        bot.answer_callback_query(call.id, "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã")
        return

    elif call.data == 'remove_all':
        # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
        user['order_items'] = []
        user['selected_for_removal'] = []
        user['stage'] = 'order_input'
        
        bot.edit_message_text(
            "üóëÔ∏è –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.\n\nüìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç.",
            chat_id,
            call.message.message_id
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        bot.answer_callback_query(call.id, "üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω")
        return

    elif call.data == 'remove_back':
        # –ù–∞–∑–∞–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        user['selected_for_removal'] = []
        user['stage'] = 'order_input'
        
        order_text = format_order_list(order_items)
        bot.edit_message_text(
            f"‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n{order_text}",
            chat_id,
            call.message.message_id
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        bot.answer_callback_query(call.id, "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç")
        return

    elif call.data.startswith('remove_toggle_'):
        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        try:
            item_index = int(call.data.replace('remove_toggle_', ''))
            if 0 <= item_index < len(order_items):
                item = order_items[item_index]
                
                if item in selected_for_removal:
                    selected_for_removal.remove(item)
                else:
                    selected_for_removal.append(item)
                
                user['selected_for_removal'] = selected_for_removal
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                new_markup = get_order_removal_keyboard(order_items, selected_for_removal)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                selected_count = len(selected_for_removal)
                message_text = (
                    f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–∫–∞–∑–∞\n\n"
                    f"–í—ã–±—Ä–∞–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {selected_count} –ø–æ–∑–∏—Ü–∏–π\n"
                    f"üì¶ = –æ—Å—Ç–∞–≤–∏—Ç—å, üóë = —É–¥–∞–ª–∏—Ç—å\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
                )
                
                bot.edit_message_text(
                    message_text,
                    chat_id,
                    call.message.message_id,
                    reply_markup=new_markup
                )
                
        except (ValueError, IndexError):
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
            return
        
        bot.answer_callback_query(call.id)
def handle_staff_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'choose_staff':
        bot.answer_callback_query(call.id)
        return

    staff_name = call.data.replace('staff_', '')
    if staff_name == 'done':
        user['stage'] = 'confirm_report'
        preview_report(chat_id)
        bot.answer_callback_query(call.id)
        return

    selected = user.setdefault('selected_staff', [])
    if staff_name in selected:
        selected.remove(staff_name)
    else:
        selected.append(staff_name)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=get_staff_keyboard(selected))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('seller_'))
def handle_seller_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'choose_sellers':
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    seller_name = call.data.replace('seller_', '')
    if seller_name == 'done':
        # Actually send the order now
        try:
            bot.set_message_reaction(chat_id, call.message.message_id, [types.ReactionTypeEmoji("‚úÖ")])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: {e}")
        
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
        is_appended = user.get("order_is_appended", False)
        shop_for_popular = user["order_shop"]
        order_count = len(user["order_items"])
        selected_sellers = user.get("selected_sellers", [])
        
        instant_confirmation = (
            f"‚úÖ **–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: **{shop_for_popular}**\n"
            f"üì¶ –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: **{order_count}**\n"
            f"üë• –ü—Ä–æ–¥–∞–≤—Ü—ã: **{', '.join(selected_sellers) if selected_sellers else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}**\n"
            f"üöÄ –ó–∞–∫–∞–∑ {'–¥–æ–ø–æ–ª–Ω–µ–Ω –∏ ' if is_appended else ''}–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..."
        )
        bot.edit_message_text(instant_confirmation, chat_id, call.message.message_id, parse_mode='Markdown')
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞
        for item in user["order_items"]:
            track_order_item(item)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
        send_order(chat_id, appended=is_appended)
        
        # Reset order state
        user["saved_order"] = []
        user["order_items"] = []
        user["order_shop"] = None
        user["order_photos"] = []
        user["order_videos"] = []
        user["order_is_appended"] = False
        user["original_order_count"] = 0
        user["selected_sellers"] = []
        user["stage"] = "main"
        
        success_msg = "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!" if is_appended else "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
        bot.send_message(chat_id, success_msg, reply_markup=get_main_menu())
        
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return

    selected = user.setdefault('selected_sellers', [])
    if seller_name in selected:
        selected.remove(seller_name)
    else:
        selected.append(seller_name)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=get_seller_keyboard(selected))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delivery_'))
def handle_delivery_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'delivery_buttons':
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
    shop = user.get("order_shop")
    if not shop or shop not in shop_data:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –º–∞–≥–∞–∑–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    shop_info = shop_data[shop]

    if call.data == 'delivery_submit':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏—ë–º–∫–∏
        pending_items = shop_info["pending_delivery"].copy()
        arrived_items = user.get("delivery_arrived", [])
        not_arrived = [item for item in pending_items if item not in arrived_items]
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ú–ê–ì–ê–ó–ò–ù–ê
        try:
            shop_info["accepted_delivery"].extend(arrived_items)
            shop_info["pending_delivery"] = not_arrived.copy()
        except Exception as e:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞ {shop}: {e}")
            return
        
        # Create final report with enhanced notifications
        report_lines = [f"üì¶ <b>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ –¥–ª—è {shop}:</b>"]
        
        # Add delivery summary statistics
        total_items = len(pending_items)
        arrived_count = len(arrived_items)
        not_arrived_count = len(not_arrived)
        report_lines.append(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {arrived_count}/{total_items} –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏–µ—Ö–∞–ª–æ ({round(arrived_count/total_items*100) if total_items > 0 else 0}%)")
        
        if arrived_items:
            report_lines.append("\n<b>‚úÖ –ü—Ä–∏–µ—Ö–∞–ª–æ:</b>")
            for item in arrived_items:
                report_lines.append(f"‚úÖ {item}")
        
        if not_arrived:
            report_lines.append("\n<b>‚ùå –ù–ï –ü–†–ò–ï–•–ê–õ–û:</b>")
            for item in not_arrived:
                report_lines.append(f"‚ùå {item}")
            report_lines.append("\n‚ö†Ô∏è <b>–ù–µ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.</b>")
            
            # Send additional notification for incomplete deliveries
            if not_arrived_count > total_items * 0.3:  # If more than 30% didn't arrive
                report_lines.append(f"\nüö® <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–æ ({not_arrived_count} –∏–∑ {total_items})")
        else:
            report_lines.append("\n‚úÖ <b>–í—Å—ë –ø—Ä–∏–µ—Ö–∞–ª–æ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ.</b>")
        
        final_report = "\n".join(report_lines)
        bot.send_message(CHAT_ID_FOR_REPORT, final_report, message_thread_id=THREAD_ID_FOR_ORDER)
        
        # Delete old order message after delivery acceptance is completed
        if shop in shop_order_messages:
            try:
                old_message_data = shop_order_messages[shop]
                bot.delete_message(CHAT_ID_FOR_REPORT, old_message_data["message_id"])
                del shop_order_messages[shop]  # Remove from tracking
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏: {e}")
        
        if not_arrived:
            bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∏, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.", reply_markup=get_main_menu())
        else:
            bot.send_message(chat_id, "‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç.", reply_markup=get_main_menu())
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user["delivery_arrived"] = []
        user["stage"] = "main"
        user["order_shop"] = None
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∏—ë–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(chat_id, user.get("delivery_message_id"))
        except:
            pass
        return
    
    if call.data.startswith('delivery_toggle_'):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
        item_index = int(call.data.replace('delivery_toggle_', ''))
        pending_items = shop_info["pending_delivery"]
        
        if 0 <= item_index < len(pending_items):
            item = pending_items[item_index]
            arrived_items = user.setdefault("delivery_arrived", [])
            
            if item in arrived_items:
                arrived_items.remove(item)
            else:
                arrived_items.append(item)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                bot.edit_message_reply_markup(
                    chat_id, 
                    call.message.message_id, 
                    reply_markup=get_delivery_keyboard(pending_items, arrived_items)
                )
            except:
                pass
        
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    user = user_data.get(chat_id)

    if not user:
        start(message)
        return

    if text == "üõç –ó–∞–∫–∞–∑":
        if user.get("saved_order"):
            # Load saved order, but still allow user to choose shop for potential auto-fill merge
            user["stage"] = "choose_shop_order_with_saved"
            saved_items = user["saved_order"]
            saved_text = ", ".join(saved_items)
            bot.send_message(chat_id, f"üíæ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {saved_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ (—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω —Å –Ω–µ–ø—Ä–∏–µ—Ö–∞–≤—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏):", reply_markup=get_shop_menu(include_back=True))
        else:
            user["stage"] = "choose_shop_order"
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu(include_back=True))
        return

    # Order handling
    if user["stage"] == "order_input":
        if text in ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞", "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å—Ä–∞–∑—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
                is_appended = user.get("order_is_appended", False)
                shop_for_popular = user["order_shop"]
                order_count = len(user["order_items"])
                
                # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
                instant_confirmation = (
                    f"‚úÖ **–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!**\n\n"
                    f"üè™ –ú–∞–≥–∞–∑–∏–Ω: **{shop_for_popular}**\n"
                    f"üì¶ –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: **{order_count}**\n"
                    f"üë• –ü—Ä–æ–¥–∞–≤—Ü—ã: **–Ω–µ –≤—ã–±—Ä–∞–Ω—ã**\n"
                    f"üöÄ –ó–∞–∫–∞–∑ {'–¥–æ–ø–æ–ª–Ω–µ–Ω –∏ ' if is_appended else ''}–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..."
                )
                confirmation_msg = bot.send_message(chat_id, instant_confirmation, parse_mode='Markdown')
                
                # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞
                for item in user["order_items"]:
                    track_order_item(item)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
                send_order(chat_id, appended=is_appended)
                
                # Reset order state
                user["saved_order"] = []
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["order_videos"] = []
                user["order_is_appended"] = False
                user["original_order_count"] = 0
                user["selected_sellers"] = []
                user["stage"] = "main"
                
                success_msg = "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!" if is_appended else "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
                bot.send_message(chat_id, success_msg, reply_markup=get_main_menu())
                return

            elif text == "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
                # Show popular items when explicitly requested
                popular_keyboard_data = get_popular_items_keyboard()
                if popular_keyboard_data:
                    markup, popular_items = popular_keyboard_data
                    user["popular_items_list"] = popular_items
                    user["stage"] = "popular_items"
                    
                    popular_msg = (
                        f"‚≠ê –¢–æ–ø-15 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑:"
                    )
                    
                    bot.send_message(chat_id, popular_msg, reply_markup=markup)
                else:
                    bot.send_message(chat_id, "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º. –ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=get_order_action_menu())
                return

            elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
                    return
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                user["stage"] = "order_removal"
                user["selected_for_removal"] = []
                
                removal_msg = (
                    f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–∫–∞–∑–∞\n\n"
                    f"–í—ã–±—Ä–∞–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: 0 –ø–æ–∑–∏—Ü–∏–π\n"
                    f"üì¶ = –æ—Å—Ç–∞–≤–∏—Ç—å, üóë = —É–¥–∞–ª–∏—Ç—å\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
                )
                
                removal_keyboard = get_order_removal_keyboard(user["order_items"])
                bot.send_message(chat_id, removal_msg, reply_markup=removal_keyboard)
                return

            elif text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
                    return
                user["saved_order"] = user["order_items"].copy()
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["order_videos"] = []
                user["order_is_appended"] = False
                user["original_order_count"] = 0
                user["selected_sellers"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª", reply_markup=get_main_menu())
                return

            elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["order_videos"] = []
                user["order_is_appended"] = False
                user["original_order_count"] = 0
                user["selected_sellers"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
                return
        else:
            # Handle text input as order items
            items = sanitize_input(text)
            if items:
                # Use merge_order function instead of simple addition
                user["order_items"] = merge_order(chat_id, items)
                
                # Show enhanced order information if this is an appended order
                is_appended = user.get("order_is_appended", False)
                original_count = user.get("original_order_count", 0)
                order_text = format_order_list(user["order_items"], show_appended_info=is_appended, original_count=original_count)
                bot.send_message(chat_id, order_text)
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤  
    if user["stage"] == "popular_items":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤,
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –≤–≤–æ–¥—É –∑–∞–∫–∞–∑–∞
        items = sanitize_input(text)
        if items:
            user["order_items"].extend(items)
            user["order_items"] = deduplicate_order_items(user["order_items"])
            user["stage"] = "order_input"
            
            order_text = format_order_list(user["order_items"])
            bot.send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É!\n\n{order_text}")
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        return

    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        user["stage"] = "choose_shop_delivery"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_shop_menu(include_back=True))
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main"})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É:")
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        count = len(user["transfers"])
        bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}‚ÇΩ</b>\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        user["stage"] = "cash_input"
        total = sum(user["transfers"])
        bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{total}‚ÇΩ</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
        return

    if text.isdigit():
        amount = int(text)
        stage = user.get("stage", "main")
        if stage == "main" and user.get("shop"):
            user["transfers"].append(amount)
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            return

        if stage == "amount_input":
            user["transfers"].append(-amount if user["mode"] == "subtract" else amount)
            bot.send_message(chat_id, f"{'‚ûñ –í–æ–∑–≤—Ä–∞—Ç' if user['mode']=='subtract' else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'}: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            user["mode"] = "add"
            user["stage"] = "main"
            return

        elif stage == "cash_input":
            user["cash"] = amount
            user["stage"] = "terminal_input"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
            return

        elif stage == "terminal_input":
            user["terminal"] = amount
            user["stage"] = "choose_staff"
            user["selected_staff"] = []
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ —Å–º–µ–Ω–µ:", reply_markup=get_staff_keyboard())
            return

    if user.get("stage") == "confirm_report":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            send_report(chat_id)
            user["transfers"] = []
            user["cash"] = 0
            user["terminal"] = 0
            user["selected_staff"] = []
            user["stage"] = "choose_shop"
            bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())
            return
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            user["stage"] = "cash_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
            return
        elif text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
            user["stage"] = "custom_date_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user["stage"] = "main"
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.", reply_markup=get_main_menu())
            return

    if user.get("stage") == "custom_date_input":
        try:
            custom_date = datetime.strptime(text, "%d.%m.%Y")
            user["date"] = custom_date.strftime("%d.%m.%Y")
            user["stage"] = "confirm_report"
            bot.send_message(chat_id, f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {user['date']}")
            preview_report(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

def preview_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    date = data["date"]
    staff = data.get("selected_staff", [])

    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        if total < 40000:
            salary = 4000
            each = 2000
        else:
            each = round_to_50((total * 0.10) / 2)
            salary = each * 2
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ\nüë§ –ü–æ {each}‚ÇΩ –∫–∞–∂–¥–æ–º—É"
    else:
        salary = max(2000, round_to_50(total * 0.10))
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ"

    staff_text = "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: " + (', '.join(staff) if staff else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

    weather_report = get_weather_report()

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n"
        f"{salary_text}\n"
        f"{staff_text}\n"
        f"{weather_report}"
    )

    bot.send_message(chat_id, report_text, reply_markup=get_confirm_menu())

def send_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    date = data["date"]
    staff = ', '.join(data.get("selected_staff", []))
    weather_report = get_weather_report()

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {transfers + cash + terminal}‚ÇΩ\n"
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {staff if staff else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"{weather_report}"
    )

    sheet.append_row([date, shop, transfers, cash, terminal, staff, weather_report])
    bot.send_message(CHAT_ID_FOR_REPORT, report_text, message_thread_id=THREAD_ID_FOR_REPORT)

def send_order(chat_id, appended=False):
    user = user_data[chat_id]
    shop = user.get("order_shop", "–ù–µ —É–∫–∞–∑–∞–Ω")
    items = user.get("order_items", [])
    photos = user.get("order_photos", [])
    videos = user.get("order_videos", [])

    if not items:
        bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
        return

    # –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if appended and shop in shop_order_messages:
        try:
            old_message_data = shop_order_messages[shop]
            bot.delete_message(CHAT_ID_FOR_REPORT, old_message_data["message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_text = f"üõí –ó–∞–∫–∞–∑ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: <b>{shop}</b>\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö
    selected_sellers = user.get("selected_sellers", [])
    if selected_sellers:
        order_text += f"üë• –ü—Ä–æ–¥–∞–≤—Ü—ã: <b>{', '.join(selected_sellers)}</b>\n"
    else:
        order_text += f"üë• –ü—Ä–æ–¥–∞–≤—Ü—ã: <b>–Ω–µ –≤—ã–±—Ä–∞–Ω—ã</b>\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –ø–æ–∑–∏—Ü–∏–π
    if appended:
        original_count = user.get("original_order_count", 0)
        new_items_count = len(items) - original_count
        order_text += f"‚ûï –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞: {original_count} –ø–æ–∑–∏—Ü–∏–π\n"
        if new_items_count > 0:
            order_text += f"üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {new_items_count}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    carried_items = shop_data.get(shop, {}).get("pending_delivery", [])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    formatted_order = format_order_with_attention(items, carried_items)
    order_text += formatted_order
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫–∏
    items_with_media = set()
    for photo in photos:
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ
        for item in items:
            if "—Ñ–æ—Ç–æ" in item.lower():
                items_with_media.add(item)
    for video in videos:
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–∏–º –≤–∏–¥–µ–æ
        for item in items:
            if "—Ñ–æ—Ç–æ" in item.lower() or "–≤–∏–¥–µ–æ" in item.lower():
                items_with_media.add(item)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞-–ø–æ–∑–∏—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
    if items_with_media:
        order_text += "\nüì∏ –ü–æ–∑–∏—Ü–∏–∏ —Å –º–µ–¥–∏–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:\n"
        for item in items_with_media:
            order_text += f"‚Ä¢ {item}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
    if photos or videos:
        media_count = len(photos) + len(videos)
        order_text += f"\nüìé –í–ª–æ–∂–µ–Ω–∏—è: {media_count} —Ñ–∞–π–ª(–æ–≤) –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
    order_message = bot.send_message(CHAT_ID_FOR_REPORT, order_text, message_thread_id=THREAD_ID_FOR_ORDER)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –∞–ª—å–±–æ–º–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if photos or videos:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
            all_media = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
            for photo in photos:
                all_media.append(types.InputMediaPhoto(
                    media=photo["file_id"],
                    caption=photo.get("caption", "")
                ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∞–ª—å–±–æ–º
            for video in videos:
                all_media.append(types.InputMediaVideo(
                    media=video["file_id"],
                    caption=video.get("caption", "")
                ))
            
            # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 2-10 —Ñ–∞–π–ª–æ–≤ –≤ –∞–ª—å–±–æ–º–µ
            if len(all_media) == 1:
                # –û–¥–∏–Ω —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                media = all_media[0]
                if media.type == 'photo':
                    bot.send_photo(CHAT_ID_FOR_REPORT, media.media, caption=media.caption, message_thread_id=THREAD_ID_FOR_ORDER)
                else:
                    bot.send_video(CHAT_ID_FOR_REPORT, media.media, caption=media.caption, message_thread_id=THREAD_ID_FOR_ORDER)
            elif len(all_media) <= 10:
                # 2-10 —Ñ–∞–π–ª–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º
                bot.send_media_group(
                    chat_id=CHAT_ID_FOR_REPORT,
                    media=all_media,
                    message_thread_id=THREAD_ID_FOR_ORDER
                )
            else:
                # –ë–æ–ª—å—à–µ 10 —Ñ–∞–π–ª–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–ª—å–±–æ–º—ã –ø–æ 10
                for i in range(0, len(all_media), 10):
                    chunk = all_media[i:i+10]
                    if len(chunk) == 1:
                        # –û–¥–∏–Ω —Ñ–∞–π–ª –≤ —á–∞–Ω–∫–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                        media = chunk[0]
                        if media.type == 'photo':
                            bot.send_photo(CHAT_ID_FOR_REPORT, media.media, caption=media.caption, message_thread_id=THREAD_ID_FOR_ORDER)
                        else:
                            bot.send_video(CHAT_ID_FOR_REPORT, media.media, caption=media.caption, message_thread_id=THREAD_ID_FOR_ORDER)
                    else:
                        # 2-10 —Ñ–∞–π–ª–æ–≤ –≤ —á–∞–Ω–∫–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º–æ–º
                        bot.send_media_group(
                            chat_id=CHAT_ID_FOR_REPORT,
                            media=chunk,
                            message_thread_id=THREAD_ID_FOR_ORDER
                        )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–∞: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            for photo in photos:
                try:
                    bot.send_photo(CHAT_ID_FOR_REPORT, photo["file_id"], caption=photo.get("caption", ""), message_thread_id=THREAD_ID_FOR_ORDER)
                except Exception as photo_error:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")

            for video in videos:
                try:
                    bot.send_video(CHAT_ID_FOR_REPORT, video["file_id"], caption=video.get("caption", ""), message_thread_id=THREAD_ID_FOR_ORDER)
                except Exception as video_error:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {video_error}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ message_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    shop_order_messages[shop] = {
        "message_id": order_message.message_id
    }

    # –°–û–•–†–ê–ù–Ø–ï–ú –ó–ê–ö–ê–ó –í –ì–õ–û–ë–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ú–ê–ì–ê–ó–ò–ù–ê
    try:
        shop_data[shop]["last_order"] = items.copy()
        
        # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º pending_delivery —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏, –ò–°–ö–õ–Æ–ß–ê–Ø —Ñ–æ—Ç–æ-–ø–æ–∑–∏—Ü–∏–∏
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ pending_delivery –∏ —Ñ–æ—Ç–æ-–ø–æ–∑–∏—Ü–∏–∏
        accepted_items = shop_data[shop]["accepted_delivery"]
        new_pending_items = [item for item in items if item not in accepted_items and not is_photo_related_item(item)]
        shop_data[shop]["pending_delivery"] = new_pending_items
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop}: {e}")
        # Continue execution as this is not critical for order delivery

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
