import os
import json
import logging
from datetime import datetime
import threading
import schedule
import time

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenWeather

# === –ó–ê–ì–†–£–ó–ö–ê .ENV ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 64
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ì–û–î–´ ===
OPENWEATHER_API_KEY = "0657e04209d46b14a466de79282d9ca7"
OPENWEATHER_CITY = "Gelendzhik"  # –ì–æ—Ä–æ–¥ –≤—Å–µ–≥–¥–∞ –ì–µ–ª–µ–Ω–¥–∂–∏–∫!
WEATHER_LOG_FILE = "weather_log.json"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

# === –•–†–ê–ù–ò–õ–ò–©–ï MESSAGE_ID –ó–ê–ö–ê–ó–û–í –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú ===
shop_order_messages = {}  # {shop_name: {"message_id": int, "photos": [], "videos": []}}

# === –°–ü–ò–°–û–ö –°–û–¢–†–£–î–ù–ò–ö–û–í ===
STAFF_LIST = ["–î–∞–Ω–∏–ª", "–î–∞–Ω–∏–∑", "–î–∞—à–∞", "–°–æ–Ω—è", "–û–∫—Å–∞–Ω–∞", "–õ–∏–∑–∞"]

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–û–ì–û–î–´ ===
def get_weather_raw():
    url = f"http://api.openweathermap.org/data/2.5/weather?q={OPENWEATHER_CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            weather_main = data["weather"][0]["main"].lower()
            weather_desc = data["weather"][0]["description"]
            wind_speed = data["wind"]["speed"]
            rain = 0
            if "rain" in data and "1h" in data["rain"]:
                rain = data["rain"]["1h"]
            return {
                "timestamp": datetime.now().isoformat(),
                "temp": temp,
                "weather": weather_main,
                "weather_desc": weather_desc,
                "rain": rain,
                "wind": wind_speed
            }
        else:
            logging.warning(f"OpenWeather error: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

def log_weather():
    now = datetime.now()
    if 9 <= now.hour < 23:
        weather = get_weather_raw()
        if weather:
            try:
                if os.path.exists(WEATHER_LOG_FILE):
                    with open(WEATHER_LOG_FILE, "r") as f:
                        weather_log = json.load(f)
                else:
                    weather_log = []
                weather_log.append(weather)
                with open(WEATHER_LOG_FILE, "w") as f:
                    json.dump(weather_log, f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")

def weather_monitor_thread():
    schedule.every(10).minutes.do(log_weather)
    while True:
        schedule.run_pending()
        time.sleep(5)

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
weather_thread = threading.Thread(target=weather_monitor_thread, daemon=True)
weather_thread.start()

def get_weather_report():
    if not os.path.exists(WEATHER_LOG_FILE):
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–æ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    with open(WEATHER_LOG_FILE, "r") as f:
        weather_log = json.load(f)
    today = datetime.now().date()
    today_log = [entry for entry in weather_log if datetime.fromisoformat(entry["timestamp"]).date() == today]
    if not today_log:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–æ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    temps = [entry["temp"] for entry in today_log]
    wind_speeds = [entry["wind"] for entry in today_log]
    rain_periods = [entry for entry in today_log if entry["rain"] > 0]
    rain_total = sum(entry["rain"] for entry in rain_periods)
    rain_hours = len(rain_periods) * 10 / 60
    # –í–º–µ—Å—Ç–æ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (–ø–∏–∫–æ–≤–∞—è)
    max_temp = round(max(temps), 1)
    avg_wind = round(sum(wind_speeds) / len(wind_speeds), 1)
    rain_was = "–¥–∞" if rain_total > 0 else "–Ω–µ—Ç"
    report = (
        f"<b>–ü–æ–≥–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"–ü–∏–∫–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{max_temp}¬∞C</b>\n"
        f"–î–æ–∂–¥—å –±—ã–ª: <b>{rain_was}</b>\n"
        f"–î–æ–∂–¥—å (–≤—Ä–µ–º—è): <b>{rain_hours:.2f} —á</b>, –≤—Å–µ–≥–æ –≤—ã–ø–∞–ª–æ <b>{rain_total:.2f} –º–º</b>\n"
        f"–°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä: <b>{avg_wind} –º/—Å</b>"
    )
    return report

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup

def get_shop_menu(include_back=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    if include_back:
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_order_action_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    markup.add("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_delivery_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_staff_keyboard(selected_staff=None):
    selected_staff = selected_staff or []
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for staff in STAFF_LIST:
        text = f"‚úÖ {staff}" if staff in selected_staff else staff
        callback_data = f"staff_{staff}"
        buttons.append(types.InlineKeyboardButton(text, callback_data=callback_data))
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="staff_done"))
    return markup

def get_delivery_keyboard(pending_items, arrived_items=None):
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–∏—ë–º–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    arrived_items = arrived_items or []
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for item in pending_items:
        status = "‚úÖ" if item in arrived_items else "‚ùå"
        text = f"{status} {item}"
        callback_data = f"delivery_toggle_{pending_items.index(item)}"
        markup.add(types.InlineKeyboardButton(text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton("üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º–∫—É", callback_data="delivery_submit"))
    return markup

def sanitize_input(text):
    items = []
    for part in text.split(','):
        items.extend([x.strip() for x in part.split('\n') if x.strip()])
    return items

def deduplicate_order_items(items):
    """Remove duplicates from order items while preserving order"""
    seen = set()
    unique_items = []
    for item in items:
        item_lower = item.lower().strip()
        if item_lower not in seen:
            seen.add(item_lower)
            unique_items.append(item)
    return unique_items

def format_order_list(items, arrived=None, show_appended_info=False, original_count=0):
    if not items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    
    result = "üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n"
    if show_appended_info and original_count > 0:
        result += f"üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {original_count}\n"
        result += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ-–∑–∞–∫–∞–∑–æ–º: {len(items) - original_count}\n"
        result += f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(items)}\n\n"
    
    for i, item in enumerate(items):
        if arrived is not None:
            if item in arrived:
                result += f"‚úÖ {item}\n"
            else:
                result += f"‚ùå {item}\n"
        else:
            # Show which items are original vs appended
            if show_appended_info and original_count > 0:
                if i < original_count:
                    result += f"üì¶ {item}\n"
                else:
                    result += f"‚ûï {item}\n"
            else:
                result += f"‚Ä¢ {item}\n"
    return result

def round_to_50(value):
    remainder = value % 50
    if remainder < 25:
        return int(value - remainder)
    else:
        return int(value + (50 - remainder))

@bot.message_handler(content_types=['photo', 'video'])
def handle_media(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    caption = message.caption or ""
    if not user:
        bot.send_message(chat_id, "üì∑/üé¨ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã –Ω–µ –≤ —Å–µ—Å—Å–∏–∏.")
        return

    stage = user.get("stage")
    if stage not in ["order_input", "delivery_confirm"]:
        bot.send_message(chat_id, "üì∑/üé¨ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑/–ø—Ä–∏–µ–º–∫—É/–¥–æ-–∑–∞–∫–∞–∑.")
        return

    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        user.setdefault("order_photos", []).append({"file_id": file_id, "caption": caption})
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    elif message.content_type == 'video':
        file_id = message.video.file_id
        user.setdefault("order_videos", []).append({"file_id": file_id, "caption": caption})
        bot.send_message(chat_id, "üé¨ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "shop": None,
        "order_shop": None,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "choose_shop",
        "date": datetime.now().strftime("%d.%m.%Y"),
        "order_items": [],
        "order_photos": [],
        "order_videos": [],
        "order_date": None,
        "pending_delivery": [],
        "accepted_delivery": [],
        "delivery_arrived": [],  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø—Ä–∏—ë–º–∫–∏
        "delivery_message_id": None,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏—ë–º–∫–∏
        "last_order": [],
        "saved_order": [],
        "selected_staff": [],
        "order_is_appended": False,
        "original_order_count": 0
    }
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())

@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def choose_shop(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user["stage"] = "main"
        bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    if not user or user.get("stage") == "choose_shop":
        user_data[chat_id] = user or {}
        user_data[chat_id].update({
            "shop": message.text,
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_shop": None,
            "order_items": [],
            "order_photos": [],
            "order_videos": [],
            "order_date": None,
            "pending_delivery": [],
            "accepted_delivery": [],
            "delivery_arrived": [],
            "delivery_message_id": None,
            "selected_staff": [],
            "order_is_appended": False,
            "original_order_count": 0
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: <b>{message.text}</b>", reply_markup=get_main_menu())
        return

    if user.get("stage") == "choose_shop_order":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            shop = message.text
            
            # Step 1: Start with pending delivery items (leftovers from previous deliveries)
            leftovers = user.get("pending_delivery", [])
            combined_items = leftovers.copy() if leftovers else []
            
            # Step 2: Check if there's an existing unsent order for this shop and merge it
            existing_order_items = []
            existing_order_combined = False
            if shop in shop_order_messages:
                # Get any existing order items for this shop from other users
                for other_user_data in user_data.values():
                    if (other_user_data.get("order_shop") == shop and 
                        other_user_data.get("order_items") and
                        other_user_data.get("stage") in ["order_input", "order_edit"]):
                        existing_order_items.extend(other_user_data["order_items"])
                        break
                
                if existing_order_items:
                    combined_items.extend(existing_order_items)
                    existing_order_combined = True
            
            # Step 3: Remove duplicates from combined items
            combined_items = deduplicate_order_items(combined_items)
            
            # Step 4: Set up order state
            user["order_items"] = combined_items
            user["order_photos"] = []
            user["order_videos"] = []
            user["order_is_appended"] = len(combined_items) > 0
            user["original_order_count"] = len(combined_items)
            
            # Step 5: Handle existing media from previous orders
            if shop in shop_order_messages:
                old_photos = shop_order_messages[shop].get("photos", [])
                old_videos = shop_order_messages[shop].get("videos", [])
                user["order_photos"] = old_photos.copy()
                user["order_videos"] = old_videos.copy()
            
            user["stage"] = "order_input"
            
            # Step 6: Prepare informative messages about what was combined
            messages = []
            
            if leftovers:
                leftovers_text = "\n".join(f"‚Ä¢ {item}" for item in leftovers)
                messages.append(
                    f"üì¶ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–æ—à–ª–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
                    f"{leftovers_text}\n\n"
                    f"‚ö†Ô∏è –≠—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ <b>—É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b> –∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
            
            if existing_order_items:
                existing_text = "\n".join(f"‚Ä¢ {item}" for item in existing_order_items)
                media_count = len(user["order_photos"]) + len(user["order_videos"])
                media_info = f"\nüìé –ú–µ–¥–∏–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞: {media_count}" if media_count > 0 else ""
                messages.append(
                    f"üîÑ <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è {shop}:</b>\n"
                    f"{existing_text}{media_info}\n\n"
                    f"‚úÖ –ó–∞–∫–∞–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –±–µ–∑ –¥—É–±–ª–µ–π."
                )
            
            total_combined = len(combined_items)
            if total_combined > 0:
                if len(leftovers) > 0 and len(existing_order_items) > 0:
                    duplicate_info = f"–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {len(leftovers) + len(existing_order_items) - total_combined}"
                elif len(leftovers) > 0 or len(existing_order_items) > 0:
                    duplicate_info = f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_combined}"
                else:
                    duplicate_info = ""
                
                if duplicate_info:
                    messages.append(f"üìä <b>{duplicate_info}</b>")
            
            # Send information messages
            for msg in messages:
                bot.send_message(chat_id, msg)
            
            # Main shop selection message
            shop_msg = f"üõí –í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: <b>{shop}</b>\n"
            if total_combined > 0:
                shop_msg += f"üìù –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {total_combined} –ø–æ–∑–∏—Ü–∏–π. –ú–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ:"
                # Show current order
                current_order_text = format_order_list(user["order_items"], show_appended_info=user.get("order_is_appended", False), original_count=user.get("original_order_count", 0))
                bot.send_message(chat_id, current_order_text)
            else:
                shop_msg += "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:"
                
            bot.send_message(chat_id, shop_msg, reply_markup=get_order_action_menu())
            return

    if user.get("stage") == "choose_shop_delivery":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            pending = []
            for u in user_data.values():
                if u.get("order_shop") == message.text and u.get("last_order"):
                    pending.extend(u["last_order"])
            pending = list(set(pending))
            if "accepted_delivery" not in user:
                user["accepted_delivery"] = []
            user["pending_delivery"] = [item for item in pending if item not in user["accepted_delivery"]]
            
            if user["pending_delivery"]:
                # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
                user["delivery_arrived"] = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–±—ã–≤—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                user["stage"] = "delivery_buttons"
                
                items_text = f"üì¶ <b>–ü—Ä–∏—ë–º–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {message.text}</b>\n\n"
                items_text += "–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–µ—Ö–∞–ª–∏, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏:\n"
                items_text += "‚úÖ = –ø—Ä–∏–µ—Ö–∞–ª–æ, ‚ùå = –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–æ\n\n"
                
                delivery_msg = bot.send_message(
                    chat_id, 
                    items_text, 
                    reply_markup=get_delivery_keyboard(user["pending_delivery"], user["delivery_arrived"])
                )
                user["delivery_message_id"] = delivery_msg.message_id
            else:
                bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
                user["stage"] = "main"
            return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu(include_back=(user.get("stage") == "choose_shop_order")))

@bot.callback_query_handler(func=lambda call: call.data.startswith('staff_'))
def handle_staff_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'choose_staff':
        bot.answer_callback_query(call.id)
        return

    staff_name = call.data.replace('staff_', '')
    if staff_name == 'done':
        user['stage'] = 'confirm_report'
        preview_report(chat_id)
        bot.answer_callback_query(call.id)
        return

    selected = user.setdefault('selected_staff', [])
    if staff_name in selected:
        selected.remove(staff_name)
    else:
        selected.append(staff_name)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=get_staff_keyboard(selected))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delivery_'))
def handle_delivery_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'delivery_buttons':
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    if call.data == 'delivery_submit':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏—ë–º–∫–∏
        pending_items = user.get("pending_delivery", [])
        arrived_items = user.get("delivery_arrived", [])
        not_arrived = [item for item in pending_items if item not in arrived_items]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        user.setdefault("accepted_delivery", [])
        for item in arrived_items:
            if item not in user["accepted_delivery"]:
                user["accepted_delivery"].append(item)
        user["pending_delivery"] = not_arrived
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        report_lines = ["üì¶ <b>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ:</b>"]
        
        if arrived_items:
            report_lines.append("\n<b>‚úÖ –ü—Ä–∏–µ—Ö–∞–ª–æ:</b>")
            for item in arrived_items:
                report_lines.append(f"‚úÖ {item}")
        
        if not_arrived:
            report_lines.append("\n<b>‚ùå –ù–ï –ü–†–ò–ï–•–ê–õ–û:</b>")
            for item in not_arrived:
                report_lines.append(f"‚ùå {item}")
            report_lines.append("\n‚ö†Ô∏è <b>–ù–µ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.</b>")
        else:
            report_lines.append("\n‚úÖ <b>–í—Å—ë –ø—Ä–∏–µ—Ö–∞–ª–æ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ.</b>")
        
        final_report = "\n".join(report_lines)
        bot.send_message(CHAT_ID_FOR_REPORT, final_report, message_thread_id=THREAD_ID_FOR_ORDER)
        
        if not_arrived:
            user["pending_delivery"] = not_arrived.copy()
            bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∏, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.", reply_markup=get_main_menu())
        else:
            user["pending_delivery"] = []
            bot.send_message(chat_id, "‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç.", reply_markup=get_main_menu())
        
        user["accepted_delivery"] = []
        user["delivery_arrived"] = []
        user["stage"] = "main"
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∏—ë–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(chat_id, user.get("delivery_message_id"))
        except:
            pass
        return
    
    if call.data.startswith('delivery_toggle_'):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
        item_index = int(call.data.replace('delivery_toggle_', ''))
        pending_items = user.get("pending_delivery", [])
        
        if 0 <= item_index < len(pending_items):
            item = pending_items[item_index]
            arrived_items = user.setdefault("delivery_arrived", [])
            
            if item in arrived_items:
                arrived_items.remove(item)
            else:
                arrived_items.append(item)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                bot.edit_message_reply_markup(
                    chat_id, 
                    call.message.message_id, 
                    reply_markup=get_delivery_keyboard(pending_items, arrived_items)
                )
            except:
                pass
        
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    user = user_data.get(chat_id)

    if not user:
        start(message)
        return

    if text == "üõç –ó–∞–∫–∞–∑":
        if user.get("saved_order"):
            # Load saved order and apply deduplication with any pending delivery items
            saved_items = user["saved_order"]
            pending_items = user.get("pending_delivery", [])
            
            # Combine saved order with pending delivery and deduplicate
            combined_items = pending_items + saved_items
            combined_items = deduplicate_order_items(combined_items)
            
            user["order_items"] = combined_items
            user["order_is_appended"] = len(pending_items) > 0
            user["original_order_count"] = len(pending_items)
            user["stage"] = "order_input"
            
            # Inform user about combination
            if len(pending_items) > 0:
                pending_text = "\n".join(f"‚Ä¢ {item}" for item in pending_items)
                bot.send_message(chat_id, 
                    f"üì¶ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–æ—à–ª–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
                    f"{pending_text}\n\n"
                    f"üíæ <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º</b>\n"
                    f"–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {len(pending_items) + len(saved_items) - len(combined_items)}")
            
            order_text = format_order_list(user["order_items"], show_appended_info=user.get("order_is_appended", False), original_count=user.get("original_order_count", 0))
            bot.send_message(chat_id, f"üíæ <b>–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑:</b>\n{order_text}\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º.", reply_markup=get_order_action_menu())
        else:
            user["stage"] = "choose_shop_order"
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu(include_back=True))
        return

    # Order handling
    if user["stage"] == "order_input":
        if text in ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
                    return
                
                # Check if this is an appended order
                is_appended = user.get("order_is_appended", False)
                send_order(chat_id, appended=is_appended)
                
                # Reset order state
                user["saved_order"] = []
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["order_videos"] = []
                user["order_is_appended"] = False
                user["original_order_count"] = 0
                user["stage"] = "main"
                
                success_msg = "‚úÖ –ó–∞–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" if is_appended else "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
                bot.send_message(chat_id, success_msg, reply_markup=get_main_menu())
                return

            if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
                    return
                bot.send_message(chat_id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å—ë', '–æ—á–∏—Å—Ç–∏—Ç—å', '—Å–±—Ä–æ—Å–∏—Ç—å'.")
                user["stage"] = "order_edit"
                return

            if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
                    return
                user["saved_order"] = user["order_items"].copy()
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["order_videos"] = []
                user["order_is_appended"] = False
                user["original_order_count"] = 0
                user["stage"] = "main"
                bot.send_message(chat_id, "üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª", reply_markup=get_main_menu())
                return

            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["order_videos"] = []
                user["order_is_appended"] = False
                user["original_order_count"] = 0
                user["stage"] = "main"
                bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
                return
        else:
            items = sanitize_input(text)
            if items:
                # Add new items and deduplicate the entire order
                user["order_items"].extend(items)
                user["order_items"] = deduplicate_order_items(user["order_items"])
                
                # Show enhanced order information if this is an appended order
                is_appended = user.get("order_is_appended", False)
                original_count = user.get("original_order_count", 0)
                order_text = format_order_list(user["order_items"], show_appended_info=is_appended, original_count=original_count)
                bot.send_message(chat_id, order_text)
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return

    if user["stage"] == "order_edit":
        text_lower = text.lower()
        if any(word in text_lower for word in ["—É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "—É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "–æ—á–∏—Å—Ç–∏—Ç—å", "—Å–±—Ä–æ—Å–∏—Ç—å"]):
            user["order_items"] = []
            bot.send_message(chat_id, "üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω.")
        else:
            to_delete = sanitize_input(text)
            initial_len = len(user["order_items"])
            remaining = []
            for order_item in user["order_items"]:
                if not any(order_item.lower() == del_item.lower() for del_item in to_delete):
                    remaining.append(order_item)
            deleted_count = initial_len - len(remaining)
            user["order_items"] = remaining
            if deleted_count:
                bot.send_message(chat_id, f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {deleted_count}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        order_text = format_order_list(user["order_items"], show_appended_info=user.get("order_is_appended", False), original_count=user.get("original_order_count", 0))
        bot.send_message(chat_id, order_text)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        user["stage"] = "order_input"
        return

    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        user["stage"] = "choose_shop_delivery"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "delivery_confirm_old":
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
        arrived = sanitize_input(text)
        invalid_items = [item for item in arrived if item not in user.get("pending_delivery", [])]
        if invalid_items:
            bot.send_message(chat_id, f"‚ö†Ô∏è –¢–æ–≤–∞—Ä(—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω(—ã) –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö: {', '.join(invalid_items)}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        not_arrived = [item for item in user.get("pending_delivery", []) if item not in arrived]
        user.setdefault("accepted_delivery", [])
        for item in arrived:
            if item not in user["accepted_delivery"]:
                user["accepted_delivery"].append(item)
        user["pending_delivery"] = not_arrived

        # Enhanced delivery confirmation display
        arrived_list = "\n".join(f"‚úÖ {item}" for item in arrived) if arrived else "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–æ"
        not_arrived_list = "\n".join(f"‚ùå {item}" for item in not_arrived) if not_arrived else "‚úÖ –í—Å—ë –ø—Ä–∏–µ—Ö–∞–ª–æ"
        
        confirmation_text = (
            "üîé <b>–ò—Ç–æ–≥ –ø–æ—Å—Ç–∞–≤–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ:</b>\n\n"
            "<b>–ü—Ä–∏–µ—Ö–∞–ª–æ:</b>\n" + arrived_list + "\n\n"
            "<b>–ù–µ –ø—Ä–∏–µ—Ö–∞–ª–æ:</b>\n" + not_arrived_list + "\n\n"
            "‚ùì <b>–¢–æ—á–Ω–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏?</b>"
        )
        
        bot.send_message(chat_id, confirmation_text, reply_markup=get_delivery_confirm_menu())
        user["stage"] = "delivery_check"
        return

    if user["stage"] == "delivery_check":
        if text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
            # Final delivery report with clear formatting
            arrived = user.get("accepted_delivery", [])
            not_arrived = user.get("pending_delivery", [])
            
            report_lines = ["üì¶ <b>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ:</b>"]
            
            if arrived:
                report_lines.append("\n<b>‚úÖ –ü—Ä–∏–µ—Ö–∞–ª–æ:</b>")
                for item in arrived:
                    report_lines.append(f"‚úÖ {item}")
            
            if not_arrived:
                report_lines.append("\n<b>‚ùå –ù–ï –ü–†–ò–ï–•–ê–õ–û:</b>")
                for item in not_arrived:
                    report_lines.append(f"‚ùå {item}")
                report_lines.append("\n‚ö†Ô∏è <b>–ù–µ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.</b>")
            else:
                report_lines.append("\n‚úÖ <b>–í—Å—ë –ø—Ä–∏–µ—Ö–∞–ª–æ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ.</b>")
            
            final_report = "\n".join(report_lines)
            bot.send_message(CHAT_ID_FOR_REPORT, final_report, message_thread_id=THREAD_ID_FOR_ORDER)
            
            if not_arrived:
                user["pending_delivery"] = not_arrived.copy()
                bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∏, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.", reply_markup=get_main_menu())
            else:
                user["pending_delivery"] = []
                bot.send_message(chat_id, "‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç.", reply_markup=get_main_menu())
            
            user["accepted_delivery"] = []
            user["stage"] = "main"
            
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏":
            # Allow user to re-input delivery acceptance
            pending_items = user.get("pending_delivery", []) + user.get("accepted_delivery", [])
            user["pending_delivery"] = pending_items
            user["accepted_delivery"] = []
            items_list = "\n".join(f"‚Ä¢ {item}" for item in pending_items)
            bot.send_message(chat_id, f"üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n<b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n{items_list}")
            user["stage"] = "delivery_confirm"
            
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user["pending_delivery"] = []
            user["accepted_delivery"] = []
            user["stage"] = "main"
            bot.send_message(chat_id, "‚ùå –ü—Ä–∏—ë–º–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_delivery_confirm_menu())
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main"})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É:")
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        count = len(user["transfers"])
        bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}‚ÇΩ</b>\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        user["stage"] = "cash_input"
        total = sum(user["transfers"])
        bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{total}‚ÇΩ</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
        return

    if text.isdigit():
        amount = int(text)
        stage = user.get("stage", "main")
        if stage == "main" and user.get("shop"):
            user["transfers"].append(amount)
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            return

        if stage == "amount_input":
            user["transfers"].append(-amount if user["mode"] == "subtract" else amount)
            bot.send_message(chat_id, f"{'‚ûñ –í–æ–∑–≤—Ä–∞—Ç' if user['mode']=='subtract' else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'}: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            user["mode"] = "add"
            user["stage"] = "main"
            return

        elif stage == "cash_input":
            user["cash"] = amount
            user["stage"] = "terminal_input"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
            return

        elif stage == "terminal_input":
            user["terminal"] = amount
            user["stage"] = "choose_staff"
            user["selected_staff"] = []
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ —Å–º–µ–Ω–µ:", reply_markup=get_staff_keyboard())
            return

    if user.get("stage") == "confirm_report":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            send_report(chat_id)
            user["transfers"] = []
            user["cash"] = 0
            user["terminal"] = 0
            user["selected_staff"] = []
            user["stage"] = "choose_shop"
            bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())
            return
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            user["stage"] = "cash_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
            return
        elif text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
            user["stage"] = "custom_date_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user["stage"] = "main"
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.", reply_markup=get_main_menu())
            return

    if user.get("stage") == "custom_date_input":
        try:
            custom_date = datetime.strptime(text, "%d.%m.%Y")
            user["date"] = custom_date.strftime("%d.%m.%Y")
            user["stage"] = "confirm_report"
            bot.send_message(chat_id, f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {user['date']}")
            preview_report(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

def preview_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    date = data["date"]
    staff = data.get("selected_staff", [])

    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        if total < 40000:
            salary = 4000
            each = 2000
        else:
            each = round_to_50((total * 0.10) / 2)
            salary = each * 2
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ\nüë§ –ü–æ {each}‚ÇΩ –∫–∞–∂–¥–æ–º—É"
    else:
        salary = max(2000, round_to_50(total * 0.10))
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ"

    staff_text = "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: " + (', '.join(staff) if staff else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

    weather_report = get_weather_report()

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n"
        f"{salary_text}\n"
        f"{staff_text}\n"
        f"{weather_report}"
    )

    bot.send_message(chat_id, report_text, reply_markup=get_confirm_menu())

def send_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    date = data["date"]
    staff = ', '.join(data.get("selected_staff", []))
    weather_report = get_weather_report()

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {transfers + cash + terminal}‚ÇΩ\n"
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {staff if staff else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"{weather_report}"
    )

    sheet.append_row([date, shop, transfers, cash, terminal, staff, weather_report])
    bot.send_message(CHAT_ID_FOR_REPORT, report_text, message_thread_id=THREAD_ID_FOR_REPORT)

def send_order(chat_id, appended=False):
    user = user_data[chat_id]
    shop = user.get("order_shop", "–ù–µ —É–∫–∞–∑–∞–Ω")
    items = user.get("order_items", [])
    photos = user.get("order_photos", [])
    videos = user.get("order_videos", [])

    if not items:
        bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
        return

    # –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if appended and shop in shop_order_messages:
        try:
            old_message_data = shop_order_messages[shop]
            bot.delete_message(CHAT_ID_FOR_REPORT, old_message_data["message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

    order_text = f"üõí –ó–∞–∫–∞–∑ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: <b>{shop}</b>\n"
    if appended:
        original_count = user.get("original_order_count", 0)
        new_items_count = len(items) - original_count
        order_text += f"<b>‚úÖ –ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—ë–Ω!</b> –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {new_items_count}\n"
    order_text += "\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
    order_message = bot.send_message(CHAT_ID_FOR_REPORT, order_text, message_thread_id=THREAD_ID_FOR_ORDER)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –º–µ–¥–∏–∞ (—É–∂–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞–≥–∞–∑–∏–Ω–∞)
    all_photos = photos.copy()
    all_videos = videos.copy()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏—è
    for photo in all_photos:
        try:
            bot.send_photo(CHAT_ID_FOR_REPORT, photo["file_id"], caption=photo.get("caption", ""), message_thread_id=THREAD_ID_FOR_ORDER)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

    for video in all_videos:
        try:
            bot.send_video(CHAT_ID_FOR_REPORT, video["file_id"], caption=video.get("caption", ""), message_thread_id=THREAD_ID_FOR_ORDER)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id –∏ –º–µ–¥–∏–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_order_messages[shop] = {
        "message_id": order_message.message_id,
        "photos": all_photos.copy(),
        "videos": all_videos.copy()
    }

    user["last_order"] = items.copy()
    
    # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º pending_delivery –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ pending_delivery —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    user["pending_delivery"] = []

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
