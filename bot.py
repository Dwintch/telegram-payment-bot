import os
import json
import logging
from datetime import datetime
import threading
import schedule
import time

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenWeather

# === –ó–ê–ì–†–£–ó–ö–ê .ENV ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_FOR_REPORT = -1002826712980
THREAD_ID_FOR_REPORT = 3
THREAD_ID_FOR_ORDER = 64
GOOGLE_SHEET_NAME = '–û—Ç—á—ë—Ç—ã'
CREDENTIALS_FILE = 'credentials.json'

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ì–û–î–´ ===
OPENWEATHER_API_KEY = "0657e04209d46b14a466de79282d9ca7"
OPENWEATHER_CITY = "Moscow"  # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥
WEATHER_LOG_FILE = "weather_log.json"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
user_data = {}

# === –°–ü–ò–°–û–ö –°–û–¢–†–£–î–ù–ò–ö–û–í ===
STAFF_LIST = ["–î–∞–Ω–∏–ª", "–î–∞–Ω–∏–∑", "–î–∞—à–∞", "–°–æ–Ω—è", "–û–∫—Å–∞–Ω–∞", "–õ–∏–∑–∞"]

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–û–ì–û–î–´ ===
def get_weather_raw():
    url = f"http://api.openweathermap.org/data/2.5/weather?q={OPENWEATHER_CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            weather_main = data["weather"][0]["main"].lower()
            weather_desc = data["weather"][0]["description"]
            wind_speed = data["wind"]["speed"]
            rain = 0
            if "rain" in data and "1h" in data["rain"]:
                rain = data["rain"]["1h"]
            return {
                "timestamp": datetime.now().isoformat(),
                "temp": temp,
                "weather": weather_main,
                "weather_desc": weather_desc,
                "rain": rain,
                "wind": wind_speed
            }
        else:
            logging.warning(f"OpenWeather error: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

def log_weather():
    now = datetime.now()
    if 9 <= now.hour < 23:
        weather = get_weather_raw()
        if weather:
            try:
                if os.path.exists(WEATHER_LOG_FILE):
                    with open(WEATHER_LOG_FILE, "r") as f:
                        weather_log = json.load(f)
                else:
                    weather_log = []
                weather_log.append(weather)
                with open(WEATHER_LOG_FILE, "w") as f:
                    json.dump(weather_log, f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")

def weather_monitor_thread():
    schedule.every(10).minutes.do(log_weather)
    while True:
        schedule.run_pending()
        time.sleep(5)

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
weather_thread = threading.Thread(target=weather_monitor_thread, daemon=True)
weather_thread.start()

def get_weather_report():
    if not os.path.exists(WEATHER_LOG_FILE):
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–æ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    with open(WEATHER_LOG_FILE, "r") as f:
        weather_log = json.load(f)
    today = datetime.now().date()
    today_log = [entry for entry in weather_log if datetime.fromisoformat(entry["timestamp"]).date() == today]
    if not today_log:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–≥–æ–¥–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    temps = [entry["temp"] for entry in today_log]
    wind_speeds = [entry["wind"] for entry in today_log]
    rain_periods = [entry for entry in today_log if entry["rain"] > 0]
    rain_total = sum(entry["rain"] for entry in rain_periods)
    rain_hours = len(rain_periods) * 10 / 60
    avg_temp = round(sum(temps) / len(temps), 1)
    avg_wind = round(sum(wind_speeds) / len(wind_speeds), 1)
    rain_was = "–¥–∞" if rain_total > 0 else "–Ω–µ—Ç"
    report = (
        f"<b>–ü–æ–≥–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{avg_temp}¬∞C</b>\n"
        f"–î–æ–∂–¥—å –±—ã–ª: <b>{rain_was}</b>\n"
        f"–î–æ–∂–¥—å (–≤—Ä–µ–º—è): <b>{rain_hours:.2f} —á</b>, –≤—Å–µ–≥–æ –≤—ã–ø–∞–ª–æ <b>{rain_total:.2f} –º–º</b>\n"
        f"–°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä: <b>{avg_wind} –º/—Å</b>"
    )
    return report

# === –ö–ù–û–ü–ö–ò ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("üõç –ó–∞–∫–∞–∑", "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return markup

def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "ÔøΩÔøΩÔøΩ –û—Ç–º–µ–Ω–∞")
    return markup

def get_order_action_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    markup.add("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def get_staff_keyboard(selected_staff=None):
    selected_staff = selected_staff or []
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for staff in STAFF_LIST:
        text = f"‚úÖ {staff}" if staff in selected_staff else staff
        callback_data = f"staff_{staff}"
        buttons.append(types.InlineKeyboardButton(text, callback_data=callback_data))
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="staff_done"))
    return markup

def sanitize_input(text):
    items = []
    for part in text.split(','):
        items.extend([x.strip() for x in part.split('\n') if x.strip()])
    return items

def format_order_list(items):
    if not items:
        return "üìã –ó–∞–∫–∞–∑ –ø—É—Å—Ç."
    return "üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)

def round_to_50(value):
    remainder = value % 50
    if remainder < 25:
        return int(value - remainder)
    else:
        return int(value + (50 - remainder))

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    caption = message.caption or ""
    if not user:
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –≤—ã –Ω–µ –≤ —Å–µ—Å—Å–∏–∏.")
        return

    stage = user.get("stage")
    if stage not in ["order_input", "delivery_confirm"]:
        bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–∏–µ–º–∫—É.")
        return

    file_id = message.photo[-1].file_id

    if stage == "order_input":
        user.setdefault("order_photos", []).append({"file_id": file_id, "caption": caption})
        if caption:
            user["order_items"].append(caption)
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É!")
    elif stage == "delivery_confirm":
        user.setdefault("delivery_photos", []).append({"file_id": file_id, "caption": caption})
        bot.send_message(chat_id, "üì∏ –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏.")

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "shop": None,
        "order_shop": None,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "choose_shop",
        "date": datetime.now().strftime("%d.%m.%Y"),
        "order_items": [],
        "order_photos": [],
        "order_date": None,
        "pending_delivery": [],
        "accepted_delivery": [],
        "last_order": [],
        "saved_order": [],
        "selected_staff": []
    }
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())

@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"])
def choose_shop(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get("stage") == "choose_shop":
        user_data[chat_id] = user or {}
        user_data[chat_id].update({
            "shop": message.text,
            "transfers": [],
            "mode": "add",
            "cash": 0,
            "terminal": 0,
            "stage": "main",
            "date": datetime.now().strftime("%d.%m.%Y"),
            "order_shop": None,
            "order_items": [],
            "order_photos": [],
            "order_date": None,
            "pending_delivery": [],
            "accepted_delivery": [],
            "selected_staff": []
        })
        bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: <b>{message.text}</b>", reply_markup=get_main_menu())
        return

    if user.get("stage") == "choose_shop_order":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            user["order_items"] = []
            user["order_photos"] = []
            user["stage"] = "order_input"
            bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: <b>{message.text}</b>\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")
            return

    if user.get("stage") == "choose_shop_delivery":
        allowed_shops = ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"]
        if message.text in allowed_shops:
            user["order_shop"] = message.text
            pending = []
            for u in user_data.values():
                if u.get("order_shop") == message.text and u.get("last_order"):
                    pending.extend(u["last_order"])
            pending = list(set(pending))
            if "accepted_delivery" not in user:
                user["accepted_delivery"] = []
            user["pending_delivery"] = [item for item in pending if item not in user["accepted_delivery"]]
            if user["pending_delivery"]:
                items_list = "\n".join(f"‚Ä¢ {item}" for item in user["pending_delivery"])
                bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n{items_list}")
                user["stage"] = "delivery_confirm"
            else:
                bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
                user["stage"] = "main"
            return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –º–µ–Ω—é.", reply_markup=get_shop_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('staff_'))
def handle_staff_callback(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user or user.get('stage') != 'choose_staff':
        bot.answer_callback_query(call.id)
        return

    staff_name = call.data.replace('staff_', '')
    if staff_name == 'done':
        user['stage'] = 'confirm_report'
        preview_report(chat_id)
        bot.answer_callback_query(call.id)
        return

    selected = user.setdefault('selected_staff', [])
    if staff_name in selected:
        selected.remove(staff_name)
    else:
        selected.append(staff_name)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=get_staff_keyboard(selected))
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    user = user_data.get(chat_id)

    if not user:
        start(message)
        return

    if text == "üõç –ó–∞–∫–∞–∑":
        if user.get("saved_order"):
            user["order_items"] = user["saved_order"].copy()
            user["stage"] = "order_input"
            order_text = format_order_list(user["order_items"])
            bot.send_message(chat_id,
                             f"üíæ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑:\n{order_text}\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º.",
                             reply_markup=get_order_action_menu())
        else:
            user["stage"] = "choose_shop_order"
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "order_input":
        if text in ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
                    return
                send_order(chat_id)
                user["saved_order"] = []
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
                return

            if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
                    return
                bot.send_message(chat_id,
                                 "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                                 "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å—ë', '–æ—á–∏—Å—Ç–∏—Ç—å', '—Å–±—Ä–æ—Å–∏—Ç—å'.")
                user["stage"] = "order_edit"
                return

            if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)":
                if not user["order_items"]:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
                    return
                user["saved_order"] = user["order_items"].copy()
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª", reply_markup=get_order_action_menu())
                return

            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                user["order_items"] = []
                user["order_shop"] = None
                user["order_photos"] = []
                user["stage"] = "main"
                bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
                return

        else:
            items = sanitize_input(text)
            if items:
                user["order_items"].extend(items)
                order_text = format_order_list(user["order_items"])
                bot.send_message(chat_id, order_text)
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        return

    if user["stage"] == "order_edit":
        text_lower = text.lower()
        if any(word in text_lower for word in ["—É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "—É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "–æ—á–∏—Å—Ç–∏—Ç—å", "—Å–±—Ä–æ—Å–∏—Ç—å"]):
            user["order_items"] = []
            bot.send_message(chat_id, "üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω.")
        else:
            to_delete = sanitize_input(text)
            initial_len = len(user["order_items"])
            remaining = []
            for order_item in user["order_items"]:
                if not any(order_item.lower() == del_item.lower() for del_item in to_delete):
                    remaining.append(order_item)
            deleted_count = initial_len - len(remaining)
            user["order_items"] = remaining
            if deleted_count:
                bot.send_message(chat_id, f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {deleted_count}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        order_text = format_order_list(user["order_items"])
        bot.send_message(chat_id, order_text)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_order_action_menu())
        user["stage"] = "order_input"
        return

    if text == "üì¶ –ü—Ä–∏–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏":
        user["stage"] = "choose_shop_delivery"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_shop_menu())
        return

    if user["stage"] == "delivery_confirm":
        arrived = sanitize_input(text)

        invalid_items = [item for item in arrived if item not in user.get("pending_delivery", [])]
        if invalid_items:
            bot.send_message(chat_id, f"‚ö†Ô∏è –¢–æ–≤–∞—Ä(—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω(—ã) –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö: {', '.join(invalid_items)}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        not_arrived = [item for item in user.get("pending_delivery", []) if item not in arrived]

        user.setdefault("accepted_delivery", [])
        for item in arrived:
            if item not in user["accepted_delivery"]:
                user["accepted_delivery"].append(item)

        user["pending_delivery"] = not_arrived

        if arrived:
            bot.send_message(chat_id, f"–û—Ç–º–µ—á–µ–Ω–æ –ø—Ä–∏–µ—Ö–∞–≤—à–∏–º:\n" + "\n".join(f"‚Ä¢ {item}" for item in arrived))
        else:
            bot.send_message(chat_id, "–ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")

        if not_arrived:
            bot.send_message(chat_id, "–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É.")
        else:
            bot.send_message(chat_id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω—è—Ç—ã.")
            user["accepted_delivery"] = []

        user["stage"] = "main"
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        user.update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main"})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    if text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥":
        user["mode"] = "add"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–û–ø, –ª–∞–≤–µ—à–µ—á–∫–∞ –∫–∞–ø–Ω—É–ª–∞! –°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?:")
        return

    if text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç":
        user["mode"] = "subtract"
        user["stage"] = "amount_input"
        bot.send_message(chat_id, "–°–º–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É:")
        return

    if text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É":
        total = sum(user["transfers"])
        count = len(user["transfers"])
        bot.send_message(chat_id, f"üìä –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>{total}‚ÇΩ</b>\n–ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")
        return

    if text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        user["stage"] = "cash_input"
        total = sum(user["transfers"])
        bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{total}‚ÇΩ</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
        return

    if text.isdigit():
        amount = int(text)
        stage = user.get("stage", "main")

        if stage == "main" and user.get("shop"):
            user["transfers"].append(amount)
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            return

        if stage == "amount_input":
            user["transfers"].append(-amount if user["mode"] == "subtract" else amount)
            bot.send_message(chat_id, f"{'‚ûñ –í–æ–∑–≤—Ä–∞—Ç' if user['mode']=='subtract' else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'}: {amount}‚ÇΩ")
            total = sum(user["transfers"])
            bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{total}‚ÇΩ</b>", reply_markup=get_main_menu())
            user["mode"] = "add"
            user["stage"] = "main"
            return

        elif stage == "cash_input":
            user["cash"] = amount
            user["stage"] = "terminal_input"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
            return

        elif stage == "terminal_input":
            user["terminal"] = amount
            user["stage"] = "choose_staff"
            user["selected_staff"] = []
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ —Å–º–µ–Ω–µ:", reply_markup=get_staff_keyboard())
            return

    if user.get("stage") == "confirm_report":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            send_report(chat_id)
            user["transfers"] = []
            user["cash"] = 0
            user["terminal"] = 0
            user["selected_staff"] = []
            user["stage"] = "choose_shop"
            bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", reply_markup=get_shop_menu())
            return
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            user["stage"] = "cash_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")
            return
        elif text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
            user["stage"] = "custom_date_input"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user["stage"] = "main"
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.", reply_markup=get_main_menu())
            return

    if user.get("stage") == "custom_date_input":
        try:
            custom_date = datetime.strptime(text, "%d.%m.%Y")
            user["date"] = custom_date.strftime("%d.%m.%Y")
            user["stage"] = "confirm_report"
            bot.send_message(chat_id, f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {user['date']}")
            preview_report(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

def preview_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    date = data["date"]
    staff = data.get("selected_staff", [])

    if shop == "–Ø–Ω—Ç–∞—Ä—å":
        if total < 40000:
            salary = 4000
            each = 2000
        else:
            each = round_to_50((total * 0.10) / 2)
            salary = each * 2
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ\nüë§ –ü–æ {each}‚ÇΩ –∫–∞–∂–¥–æ–º—É"
    else:
        salary = max(2000, round_to_50(total * 0.10))
        salary_text = f"üëî –ó–ü: {salary}‚ÇΩ"

    staff_text = "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: " + (', '.join(staff) if staff else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

    weather_report = get_weather_report()

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n"
        f"{salary_text}\n"
        f"{staff_text}\n"
        f"{weather_report}"
    )

    bot.send_message(chat_id, report_text, reply_markup=get_confirm_menu())

def send_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    date = data["date"]
    staff = ', '.join(data.get("selected_staff", []))
    weather_report = get_weather_report()

    report_text = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\n"
        f"üèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\n"
        f"üìä –ò—Ç–æ–≥–æ: {transfers + cash + terminal}‚ÇΩ\n"
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {staff if staff else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        f"{weather_report}"
    )

    sheet.append_row([date, shop, transfers, cash, terminal, staff, weather_report])
    bot.send_message(CHAT_ID_FOR_REPORT, report_text, message_thread_id=THREAD_ID_FOR_REPORT)

def send_order(chat_id):
    user = user_data[chat_id]
    shop = user.get("order_shop", "–ù–µ —É–∫–∞–∑–∞–Ω")
    items = user.get("order_items", [])
    photos = user.get("order_photos", [])

    if not items:
        bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.")
        return

    order_text = f"üõí –ó–∞–∫–∞–∑ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: <b>{shop}</b>\n\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
    bot.send_message(CHAT_ID_FOR_REPORT, order_text, message_thread_id=THREAD_ID_FOR_ORDER)

    for photo in photos:
        try:
            bot.send_photo(CHAT_ID_FOR_REPORT, photo["file_id"], caption=photo.get("caption", ""), message_thread_id=THREAD_ID_FOR_ORDER)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

    user["last_order"] = items.copy()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()