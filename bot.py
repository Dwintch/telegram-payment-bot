import os
import json
from collections import defaultdict, Counter
from datetime import datetime

import telebot
from telebot import types
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

load_dotenv()

# === ENV ===
BOT_TOKEN = os.getenv("BOT_TOKEN_1")
CHAT_ID_FOR_REPORT = int(os.getenv("CHAT_ID_FOR_REPORT"))
THREAD_ID_FOR_REPORT = int(os.getenv("THREAD_ID_FOR_REPORT"))
THREAD_ID_FOR_ORDER = int(os.getenv("THREAD_ID_FOR_ORDER"))
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

# === Check ENV ===
if not all([BOT_TOKEN, CHAT_ID_FOR_REPORT, THREAD_ID_FOR_REPORT, THREAD_ID_FOR_ORDER, GOOGLE_SHEET_NAME, CREDENTIALS_FILE]):
    raise ValueError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã")

# === Init Bot ===
bot = telebot.TeleBot(BOT_TOKEN)

# === Init Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === DATA ===
user_data = {}
orders = defaultdict(list)
position_counter = Counter()
user_states = {}  # user_id -> {'state': ..., 'shop': ...}
TOP_COUNTER_FILE = "top_counter.json"

# === Load previous positions ===
if os.path.exists(TOP_COUNTER_FILE):
    with open(TOP_COUNTER_FILE, "r", encoding="utf-8") as f:
        position_counter.update(json.load(f))

# === Menus ===
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥—ã", "üì¶ –ó–∞–∫–∞–∑—ã")
    return markup

def get_shop_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞")
    markup.add("üîô –ù–∞–∑–∞–¥")
    return markup

def get_money_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –ü–µ—Ä–µ–≤–æ–¥", "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
    markup.add("üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
    markup.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "üì¶ –ö –∑–∞–∫–∞–∑–∞–º")
    return markup

def get_confirm_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "‚ùå –û—Ç–º–µ–Ω–∞")
    return markup

def shop_keyboard_inline():
    keyboard = types.InlineKeyboardMarkup()
    for shop in ["—è–Ω—Ç–∞—Ä—å", "—Ö–∞–π–ø", "–ø–æ–ª–∫–∞"]:
        keyboard.add(types.InlineKeyboardButton(text=shop.capitalize(), callback_data=f"shop_{shop}"))
    return keyboard

# === General Start ===
@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=get_main_menu())

# === Navigation ===
@bot.message_handler(func=lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑—ã")
def order_mode(message):
    user_states[message.from_user.id] = {"state": "choosing_shop"}
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=shop_keyboard_inline())

@bot.message_handler(func=lambda m: m.text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥—ã")
def money_mode(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "shop": None, "transfers": [], "mode": "add",
        "cash": 0, "terminal": 0, "stage": "choose_shop",
        "date": datetime.now().strftime("%d.%m.%Y")
    }
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_shop_menu())

@bot.message_handler(func=lambda m: m.text == "üì¶ –ö –∑–∞–∫–∞–∑–∞–º")
def go_to_orders(message):
    order_mode(message)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back_to_main(message):
    start(message)

# === Order Flow ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("shop_"))
def shop_chosen(call):
    user_id = call.from_user.id
    shop = call.data.split("_")[1]
    user_states[user_id] = {"state": "writing_order", "shop": shop}

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: <b>{shop.capitalize()}</b>\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞:",
        parse_mode="HTML",
    )
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "writing_order")
def receive_order(message):
    user_id = message.from_user.id
    shop = user_states[user_id]["shop"]
    positions = [line.strip() for line in message.text.replace(",", "\n").split("\n") if line.strip()]

    orders[shop].extend(positions)
    position_counter.update(positions)

    with open(TOP_COUNTER_FILE, "w", encoding="utf-8") as f:
        json.dump(position_counter, f, ensure_ascii=False)

    formatted = "\n".join(f"‚ñ™Ô∏è {p}" for p in positions)
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥–ª—è <b>{shop.capitalize()}</b>:\n{formatted}", parse_mode="HTML")

    bot.send_message(
        CHAT_ID_FOR_REPORT,
        f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è {shop.capitalize()}</b>:\n{formatted}",
        parse_mode="HTML",
        message_thread_id=THREAD_ID_FOR_ORDER,
    )

    user_states.pop(user_id, None)

# === Money Flow ===
@bot.message_handler(func=lambda m: m.text in ["–Ø–Ω—Ç–∞—Ä—å", "–•–∞–π–ø", "–ü–æ–ª–∫–∞"])
def choose_shop(message):
    chat_id = message.chat.id
    user_data[chat_id].update({
        "shop": message.text,
        "transfers": [],
        "mode": "add",
        "cash": 0,
        "terminal": 0,
        "stage": "main",
        "date": datetime.now().strftime("%d.%m.%Y")
    })
    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: {message.text}", reply_markup=get_money_menu())

@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
    chat_id = message.chat.id
    if user_data.get(chat_id, {}).get("shop"):
        user_data[chat_id].update({"mode": "add", "cash": 0, "terminal": 0, "stage": "main"})
        bot.send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_money_menu())
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=get_shop_menu())

@bot.message_handler(func=lambda m: m.text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥")
def handle_transfer(message):
    chat_id = message.chat.id
    user_data[chat_id]["mode"] = "add"
    user_data[chat_id]["stage"] = "amount_input"
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ?")

@bot.message_handler(func=lambda m: m.text == "üí∏ –í–æ–∑–≤—Ä–∞—Ç")
def handle_return(message):
    chat_id = message.chat.id
    user_data[chat_id]["mode"] = "subtract"
    user_data[chat_id]["stage"] = "amount_input"
    bot.send_message(chat_id, "–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:")

@bot.message_handler(func=lambda m: m.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º—É")
def show_total(message):
    chat_id = message.chat.id
    total = sum(user_data.get(chat_id, {}).get("transfers", []))
    count = len(user_data.get(chat_id, {}).get("transfers", []))
    bot.send_message(chat_id, f"üìä –°—É–º–º–∞: {total}‚ÇΩ\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {count}")

@bot.message_handler(func=lambda m: m.text == "üìÑ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
def start_report(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        money_mode(message)
        return
    total = sum(user_data[chat_id]["transfers"])
    user_data[chat_id]["stage"] = "cash_input"
    bot.send_message(chat_id, f"üßæ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {total}‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö:")

@bot.message_handler(func=lambda m: m.text.isdigit())
def handle_amount(message):
    chat_id = message.chat.id
    stage = user_data.get(chat_id, {}).get("stage", "main")
    mode = user_data[chat_id].get("mode", "add")
    amount = int(message.text)

    if stage in ["main", "amount_input"]:
        user_data[chat_id]["transfers"].append(-amount if mode == "subtract" else amount)
        user_data[chat_id]["stage"] = "main"
        bot.send_message(chat_id, f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {sum(user_data[chat_id]['transfers'])}‚ÇΩ", reply_markup=get_money_menu())
    elif stage == "cash_input":
        user_data[chat_id]["cash"] = amount
        user_data[chat_id]["stage"] = "terminal_input"
        bot.send_message(chat_id, "–°—É–º–º–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:")
    elif stage == "terminal_input":
        user_data[chat_id]["terminal"] = amount
        user_data[chat_id]["stage"] = "confirm_report"
        preview_report(chat_id)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
def confirm_and_send(message):
    chat_id = message.chat.id
    send_report(chat_id)
    user_data[chat_id].update({"stage": "main", "transfers": [], "cash": 0, "terminal": 0})
    bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=get_money_menu())

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def edit_data(message):
    user_data[message.chat.id]["stage"] = "amount_input"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:")

@bot.message_handler(func=lambda m: m.text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É")
def change_date(message):
    user_data[message.chat.id]["stage"] = "date_input"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("stage") == "date_input")
def set_date(message):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        user_data[message.chat.id]["date"] = message.text
        user_data[message.chat.id]["stage"] = "confirm_report"
        preview_report(message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

# === Helpers ===
def round_to_50(value):
    remainder = value % 50
    return int(value - remainder) if remainder < 25 else int(value + (50 - remainder))

def preview_report(chat_id):
    data = user_data[chat_id]
    shop = data["shop"]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    date = data["date"]

    salary = 4000 if shop == "–Ø–Ω—Ç–∞—Ä—å" and total < 40000 else round_to_50(total * 0.10)
    salary_text = f"üëî –ó–ü: {salary}‚ÇΩ"

    report = (
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\nüìÖ –î–∞—Ç–∞: {date}\nüí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\nüíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\nüèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\nüìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n{salary_text}"
    )
    bot.send_message(chat_id, report, reply_markup=get_confirm_menu())

def send_report(chat_id):
    data = user_data[chat_id]
    transfers = sum(data["transfers"])
    cash = data["cash"]
    terminal = data["terminal"]
    total = transfers + cash + terminal
    shop = data["shop"]
    date = data["date"]
    salary = 4000 if shop == "–Ø–Ω—Ç–∞—Ä—å" and total < 40000 else round_to_50(total * 0.10)

    sheet.append_row([date, shop, transfers, cash, terminal, total, salary])

    bot.send_message(
        CHAT_ID_FOR_REPORT,
        f"üì¶ –ú–∞–≥–∞–∑–∏–Ω: {shop}\nüìÖ {date}\nüí≥ –ü–µ—Ä–µ–≤–æ–¥—ã: {transfers}‚ÇΩ\nüíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash}‚ÇΩ\nüèß –¢–µ—Ä–º–∏–Ω–∞–ª: {terminal}‚ÇΩ\nüìä –ò—Ç–æ–≥–æ: {total}‚ÇΩ\nüëî –ó–ü: {salary}‚ÇΩ",
        message_thread_id=THREAD_ID_FOR_REPORT
    )

# === Start polling ===
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.remove_webhook()
    bot.infinity_polling()
